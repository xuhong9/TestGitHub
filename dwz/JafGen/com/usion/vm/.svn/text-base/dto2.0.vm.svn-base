#################################################################
##
##               variable
##
#################################################################
#set( $DTO_NAME = "${dtoInfo.dtoName}${orm_suffix_dto}" )  ## dto name
#set( $PK_NAME  = "${dtoInfo.dtoName}${orm_suffix_pk}" )  ## pk name
#set($columnMsgSendTimeStamp="MSGSNDTIME")   ## msgsendtime
#set( $HAS_CHILD = 0)
#if(${parentChildrenRels.isParent("${dtoInfo.dtoName}")})
  #set( $HAS_CHILD = 1)
  #set( $CHILD_DTO_NAME=${parentChildrenRels.getChildTableDto("${dtoInfo.dtoName}")})
  #set( $CHILD_DTO_NAME="$CHILD_DTO_NAME${orm_suffix_dto}")
  #set( $KEYS = ${parentChildrenRels.getReferenceKeys("${dtoInfo.dtoName}")})

  
#end

#######################################################
package ${dtoPkg};

import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.util.*;
import java.util.Map.Entry;

import java.lang.reflect.Array;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.cfcc.yak.base.persistence.ibeanorm.parent.YakIDto;
import com.cfcc.yak.base.persistence.ibeanorm.parent.YakIPkGen;
import java.text.SimpleDateFormat;
import com.cfcc.yak.base.persistence.PersistenceGlobalProperties;
import ${pkPkg}.${PK_NAME};
/**
 * <p>Title: DTO of table: ${dtoInfo.tableInfo.tablename}</p>
 * <p>Description: $!{dtoInfo.tableInfo.tableremarks} Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2005</p>
 * <p>Company: CFCC </p>
 * <p>Generation Time: ${generationTime} </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2008-01-08 16:30:00 
 *
 * @author ${generator}
 */


public class $DTO_NAME  #if(${dtoInfo.dtoExtends} == "") #else extends ${dtoInfo.dtoExtends} #end 

                              implements YakIDto #if(${dtoInfo.dtoImplements} == "") #else,${dtoInfo.dtoImplements} #end
{

     private static final long serialVersionUID = 1L;
/********************************************************
 *   fields
 ********************************************************/

#foreach($field in ${dtoInfo.fields})
    /**
    * $!{field.column.remarks} ${field.column.name} ${field.column.type} #if (${field.column.isBPK()}), PK #end  #if (!${field.column.isBNULL()}), NOT NULL #end #if (${field.column.isIdentity()}), Identity #end #if (${field.column.isGenerated()}), Generated #end
    */
#if ($field.type == "Clob")
	protected String ${field.name};	
#else
    protected ${field.type} ${field.name};
#end
#end

	/**
	 * $msg_cn.get("BJDQBXGUDLJQYSZ")
	 */
	protected Map changedValues = new HashMap();
	
#if($HAS_CHILD == 1)
    /**
    * children dto
    */
    $CHILD_DTO_NAME[]  ${CHILD_DTO_NAME}s;
#end

/******************************************************
*
*  getter and setter
*
*******************************************************/

#foreach($field in ${dtoInfo.fields})

#if ($field.type == "Clob")
    /**
    *  $!{field.column.remarks} Getter ${field.column.name}#if (${field.column.isBPK()}), PK#end #if (!${field.column.isBNULL()}), NOT NULL #end #if (${field.column.isIdentity()}), Identity #end #if (${field.column.isGenerated()}), Generated #end
    * */
    public String ${NamingConvention.getGetterFromColumnName("${field.column.name}")}()
    {
        return $field.name;
    }
     /**
     *  $!{field.column.remarks} Setter ${field.column.name}#if (${field.column.isBPK()}), PK#end #if (!${field.column.isBNULL()}), NOT NULL #end #if (${field.column.isIdentity()}), Identity #end #if (${field.column.isGenerated()}), Generated #end
     * */
    public void ${NamingConvention.getSetterFromColumnName("${field.column.name}")}(String _${field.name}) {
		if (!changedValues.containsKey(${NamingConvention.getGetterColumnName("${field.column.name}")}())) {
			changedValues.put(${NamingConvention.getGetterColumnName("${field.column.name}")}(), this.${field.name});
		}
        this.${field.name} = _${field.name};
    }    
#else
     /**
     *  $!{field.column.remarks} Getter ${field.column.name}#if (${field.column.isBPK()}), PK#end #if (!${field.column.isBNULL()}), NOT NULL #end #if (${field.column.isIdentity()}), Identity #end #if (${field.column.isGenerated()}), Generated #end
     * */
    public ${field.type} ${NamingConvention.getGetterFromColumnName("${field.column.name}")}()
    {
        return $field.name;
    }
     /**
     *  $!{field.column.remarks} Setter ${field.column.name}#if (${field.column.isBPK()}), PK#end #if (!${field.column.isBNULL()}), NOT NULL #end #if (${field.column.isIdentity()}), Identity #end #if (${field.column.isGenerated()}), Generated #end
     * */
    public void ${NamingConvention.getSetterFromColumnName("${field.column.name}")}(${field.type} _${field.name}) {
		if (!changedValues.containsKey(${NamingConvention.getGetterColumnName("${field.column.name}")}())) {
			changedValues.put(${NamingConvention.getGetterColumnName("${field.column.name}")}(), this.${field.name});
		}
        this.${field.name} = _${field.name};
    }
#end

#end

#if($HAS_CHILD == 1)
     /**
     *  children getter
     * */
   public $CHILD_DTO_NAME[] get${CHILD_DTO_NAME}s()
    {
        return ${CHILD_DTO_NAME}s;
    }

     /**
     *  children setter
     * */
    public void set${CHILD_DTO_NAME}s($CHILD_DTO_NAME[] _${CHILD_DTO_NAME}s) 
    {
        this.${CHILD_DTO_NAME}s = _${CHILD_DTO_NAME}s;
    }

  
#end


/******************************************************
*
*  Get Column Name
*
*******************************************************/
#set( $columnnum = 0 )
#foreach($field in ${dtoInfo.fields})
    /**
    *  $!{field.column.remarks} Getter ${field.column.name}#if (${field.column.isBPK()}), PK#end #if (!${field.column.isBNULL()}), NOT NULL #end #if (${field.column.isIdentity()}), Identity #end #if (${field.column.isGenerated()}), Generated #end
    * */
    public static String  ${NamingConvention.getGetterColumnName("${field.column.name}")}()
    {
        return "${field.column.name}";
    }
#set( $columnnum = $columnnum + 1 )
   
#end


    /**
    *  Table Name
    */
    public static String tableName(){
        return "${dtoInfo.tableInfo.tablename}";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
#set( $num = 0 )
        String[] columnNames = new String[${columnnum}];        
#foreach($field in ${dtoInfo.fields})
        columnNames[${num}]="${field.column.name}";
#set( $num = $num + 1 )
#end
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
#foreach($field in ${dtoInfo.fields})
#if ($field.type == "Clob" || $field.type == "byte[]")

#else
        if(this.${field.name}!=null)
          _hash_ = _hash_ * 31+ this.${field.name}.hashCode() ;
#end
#end

#if($HAS_CHILD == 1)
      int thisChildrenCount = 0;
        if(this.${CHILD_DTO_NAME}s != null)
           thisChildrenCount = this.${CHILD_DTO_NAME}s.length;
         for(int i=0;i<thisChildrenCount;i++)
         {
          if(this.${CHILD_DTO_NAME}s[i]!=null)
	          _hash_ = _hash_ * 31+ this.${CHILD_DTO_NAME}s[i].hashCode() ;
       }
#end
		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()throws CloneNotSupportedException
    {
    	return super.clone();
      /*  $DTO_NAME bean = new $DTO_NAME();

  #foreach($field in ${dtoInfo.fields})
#if (${field.column.isBPK()} )
        bean.${field.name} = this.${field.name};

#elseif ($field.type == "String")
        if (this.${field.name} != null)
            bean.${field.name} = String.valueOf(this.${field.name});
#elseif ($field.type == "BigDecimal")
        if (this.${field.name} != null)
            bean.${field.name} = new BigDecimal(this.${field.name}.toString());
#elseif ($field.type == "Double")
        if (this.${field.name} != null)
            bean.${field.name} = Double.valueOf(this.${field.name}.doubleValue());
#elseif ($field.type == "Long")
        if (this.${field.name} != null)
            bean.${field.name} = Long.valueOf(this.${field.name}.toString());
#elseif ($field.type == "Integer")
        if (this.${field.name} != null)
            bean.${field.name} = Integer.valueOf(this.${field.name}.toString());
#elseif ($field.type == "Short")
        if (this.${field.name} != null)
            bean.${field.name} = Short.valueOf(this.${field.name}.toString());
#elseif ($field.type == "byte[]")
        if (this.${field.name} != null)
            bean.${field.name} = this.${field.name};
#elseif ($field.type == "Clob")
        if (this.${field.name} != null)
            bean.${field.name} = this.${field.name};
#else
        if (this.${field.name} != null)
            bean.${field.name} = (${field.type}) this.${field.name}.clone();
#end
  #end

#if($HAS_CHILD == 1)
       if(this.${CHILD_DTO_NAME}s != null){
          bean.${CHILD_DTO_NAME}s = ($CHILD_DTO_NAME[]) Array.newInstance(${CHILD_DTO_NAME}.class,this.${CHILD_DTO_NAME}s.length);
          for(int i=0;i<this.${CHILD_DTO_NAME}s.length;i++){
             bean.${CHILD_DTO_NAME}s[i] = ($CHILD_DTO_NAME)this.${CHILD_DTO_NAME}s[i].clone();
          }
       }
#end
        return bean;*/
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("$DTO_NAME").append(sep);
    #foreach($field in ${dtoInfo.fields})
#if ($field.type == "Clob" || $field.type == "byte[]") 

#else    
    sb.append("[${field.name}]").append(" = ").append(${field.name}).append(sep);
#end
    #end
        return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

#foreach($field in ${dtoInfo.fields})
  #if(${field.column.name} == ${columnModifyNumber} )
    //don't need check field ${field.column.name},it is ModifyNumber column
  #elseif (${field.column.name}== ${columnCreateTimeStamp} )
    //don't need check field ${field.column.name},it is CreateTimeStamp column
  #elseif (${field.column.name} == ${columnUpdateTimeStamp} )
  //don't need check field ${field.column.name},it is UpdateTimeStamp column
   #elseif (${field.column.name} == $columnMsgSendTimeStamp )
  //don't need check field ${field.column.name},it is SndTimeStamp column
  #elseif(${field.column.isGenerated()})
  //don't need check field ${field.column.name},it is generated column
  #else
  //check field ${field.column.name}
  #if (!${field.column.isBNULL()})
    if (this.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
             sb.append("$!{field.column.name}$!{field.column.remarks}$msg_cn.get("BNWKFH")");
  #end
  #if (${field.type} == "String" &&  ${field.column.width} > 0 )
  if (this.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()!=null)
             if (this.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().getBytes().length > ${field.column.width})
                sb.append("$!{field.column.name}$!{field.column.remarks}$msg_cn.get("KDBNCH") "+${field.column.width}+"$msg_cn.get("GZFFH") ");
  #end
  #end

#end
#*
#if($HAS_CHILD == 1)
     //check children
       if(this.${CHILD_DTO_NAME}s != null){
          for(int i=0;i<this.${CHILD_DTO_NAME}s.length;i++){
            String cmsg = this.${CHILD_DTO_NAME}s[i].checkValid();
            if(cmsg!=null)
              sb.append("�ӱ���ݵ�" + i + "��:" + cmsg +"\n" );
          }
       }
#end
*#
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
#foreach($field in ${dtoInfo.fields})
  #if(${field.column.name} == ${columnModifyNumber} )
    //don't need check field ${field.column.name},it is ModifyNumber column
  #elseif (${field.column.name}== ${columnCreateTimeStamp} )
    //don't need check field ${field.column.name},it is CreateTimeStamp column
  #elseif (${field.column.name} == ${columnUpdateTimeStamp} )
  //don't need check field ${field.column.name},it is UpdateTimeStamp column
  #elseif (${field.column.name} == $columnMsgSendTimeStamp )
  //don't need check field ${field.column.name},it is SndTimeStamp column
  #elseif(${field.column.isGenerated()})
  //don't need check field ${field.column.name},it is generated column
  #else
  //check field ${field.column.name}
  #if ((!${field.column.isBNULL()})||(${field.type} == "String" &&  ${field.column.width} > 0) )
   for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("${field.column.name}")) {
  #end
  #if (!${field.column.isBNULL()})
           if (this.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                    sb.append("${field.column.name} $!{field.column.remarks}$msg_cn.get("BNWKFH") ");
  #end
  #if (${field.type} == "String" &&  ${field.column.width} > 0 )
           if (this.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()!=null)
                    if (this.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().getBytes().length > ${field.column.width})
                        sb.append("${field.column.name} $!{field.column.remarks}$msg_cn.get("KDBNCH") "+${field.column.width}+"$msg_cn.get("GZFFH")");
  #end
  #if ((!${field.column.isBNULL()})||(${field.type} == "String" &&  ${field.column.width} > 0) )
         break;
         }
  }
  #end
  #end

#end
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "$msg_cn.get("SRZDGSDYBZZDGSFH") ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("$msg_cn.get("SRZD") " + _columnNames[i] + " $msg_cn.get("BZGBZDZ") ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
#if($HAS_CHILD == 1)
     return true;
#else
     return false;
#end
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
#if($HAS_CHILD == 1)
     return get${CHILD_DTO_NAME}s();
#else
     return null;
#end
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
#if($HAS_CHILD == 1)
     ${CHILD_DTO_NAME}s = (${CHILD_DTO_NAME}[])_dtos;
#else
     throw new RuntimeException("$msg_cn.get("CDTOMYXGLDZDTO")");
#end
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
#set ($numpk = 0) 
#foreach($pk in ${dtoInfo.pks})
#set ($numpk = $numpk + 1)
#end
#if(${numpk} != 0)
      ${PK_NAME} pk = new ${PK_NAME}();
#end
#foreach($pk in ${dtoInfo.pks})
      pk.${NamingConvention.getSetterFromColumnName("${pk.column.name}")}(${NamingConvention.getGetterFromColumnName("${pk.column.name}")}());
#end
#if(${numpk} == 0)
      throw new RuntimeException("$msg_cn.get("CDTOMYPK")");
#else
      return pk;
#end     
    };
    
	/**
	 * $msg_cn.get("GGQSFBXGDSX")
	 */
	public void clearChangedFlag() {
		changedValues.clear();
	}

	/**
	 * $msg_cn.get("GDBXGDL")
	 * 
	 * @return
	 */
	public List getChangedFields() {
		List changedFields = new ArrayList();
		Set keySet = changedValues.keySet();
		for (Object object : keySet) {
			changedFields.add(object);
		}
		return changedFields;
	}

	/**
	 * $msg_cn.get("TGLMHDYSZ")
	 * 
	 * @param fieldName
	 * @return
	 */
	public Object getOldValue(String fieldName) {
		if (changedValues.containsKey(fieldName))
			return changedValues.get(fieldName);
		return null;
	}

	/**
	 * $msg_cn.get("BJDQDTOSZSFBXGG")
	 * 
	 * @return
	 */
	public boolean isChanged() {
		return !changedValues.isEmpty();
	}

	/**
	 * $msg_cn.get("HFXGQDZ")
	 */
	public void restoreChangedValule() {
		Set keySet = changedValues.keySet();
		for (Object object : keySet) {
			String key = (String) object;
			Object value = changedValues.get(key);
#set( $columnnum = 0 )
#foreach($field in ${dtoInfo.fields})
#if($columnnum == 0)
			if (${NamingConvention.getGetterColumnName("${field.column.name}")}().equals(key)) {
				${NamingConvention.getSetterFromColumnName("${field.column.name}")}((${field.type})value);
			}
#else
			else if (${NamingConvention.getGetterColumnName("${field.column.name}")}().equals(key)) {
				${NamingConvention.getSetterFromColumnName("${field.column.name}")}((${field.type})value);
			}
#end
#set( $columnnum = $columnnum + 1 )
#end
		}
		changedValues.clear();
	}
	
#set($BIGDECIMAL = "BigDecimal") 
#set($DATE = "Date") 
#set($TIMESTAMP = "Timestamp") 
/**
*pk auto gennerator
*/	
	public void doAutoGenPk(YakIPkGen pkgen) {
#set ($numpk = 0) 
#foreach($pk in ${dtoInfo.pks})
#set ($numpk = $numpk + 1)
#end
#foreach($pk in ${dtoInfo.pks})
#if($BIGDECIMAL == ${pk.type}||$DATE == ${pk.type}||$TIMESTAMP == ${pk.type})
      if(null==this.${pk.name})
      {
        this.${pk.name}=(${pk.type})pkgen.getGenValue("${dtoInfo.tableInfo.tablename}","${pk.column.name}",this);
      }
#else 
	if(this.${pk.name}==null||"".equals(this.${pk.name}))
    {
      this.${pk.name}=(${pk.type})pkgen.getGenValue("${dtoInfo.tableInfo.tablename}","${pk.column.name}",this);
    }
#end
#end 
#if(${numpk} == 0)
      throw new RuntimeException("$msg_cn.get("CDTOMYPK")");
#end    
	}
/**
*map值  set到DTO
*/

	public void doMapToColumnValue(Map map)   {

		if(PersistenceGlobalProperties.getGlobalMapToDtoStrategy()==PersistenceGlobalProperties.MAPDTOSTRATEGY_NULL_VALID)
		{
			/*允许处理map中value为NULL的元素*/
			doMapToColumnValueNullValid(map);
		}else
		{   
			/*不处理map中value为NULL的元素*/
			doMapToColumnValueNullNoValid(map);
		}
	}
	
	/**
	*map值  set到DTO 处理NULL值
	*/

		public void doMapToColumnValueNullValid(Map map)  {
	#foreach($field in ${dtoInfo.fields})
		    if(map.containsKey("${field.name}"))
		    {
	#if($BIGDECIMAL == ${field.type})
	             if(map.get("${field.name}") instanceof BigDecimal)
	             {
	                 this.${field.name}=(${field.type})map.get("${field.name}");
	             }else if(map.get("${field.name}") instanceof String)
	             {
	                if(!"".equals(map.get("${field.name}").toString().trim()))
		             {
			           this.${field.name}=new ${field.type}(map.get("${field.name}").toString().trim());
			         }else
			         {
			           this.${field.name}=null;
			         }
	             }else
	             {
	            	 this.${field.name}=null;
	             }
	#elseif($DATE == ${field.type})
		        if(map.get("${field.name}") instanceof java.util.Date)
		        {
		           this.${field.name}=new ${field.type}(((java.util.Date)map.get("${field.name}")).getTime());
		        }else if(map.get("${field.name}") instanceof String)
		        {
		             try {
		                if(!"".equals(map.get("${field.name}")))
		                {
						  this.${field.name}=new ${field.type}(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("${field.name}").toString().trim()).getTime());
					    }else
					    {
					      this.${field.name}=null;
					    }
				    } catch (Exception e) {
						throw new RuntimeException(e.getMessage());
					}
		        }else if(map.get("${field.name}") instanceof java.sql.Date)
		        {
		           this.${field.name}=(${field.type})map.get("${field.name}");
		        }else
		        {
		        	this.${field.name}=null;
		        }
	#elseif($TIMESTAMP == ${field.type})
		        if(map.get("${field.name}") instanceof java.sql.Timestamp)
		        {
		           this.${field.name}=(${field.type})map.get("${field.name}");
		        }else if(map.get("${field.name}") instanceof java.sql.Date)
		        {
		           this.${field.name}=new ${field.type}(((java.sql.Date)map.get("${field.name}")).getTime());
		        }else if(map.get("${field.name}") instanceof java.util.Date)
		        {
		           this.${field.name}=new ${field.type}(((java.util.Date)map.get("${field.name}")).getTime());
		        }else if(map.get("${field.name}") instanceof String)
		        {
		        	try {
		                if(!"".equals(map.get("${field.name}")))
		                {
						  this.${field.name}=new ${field.type}(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("${field.name}").toString().trim()).getTime());
					    }else
					    {
					      this.${field.name}=null;
					    }
					} catch (Exception e) {
						throw new RuntimeException(e.getMessage());
					}
		        }else 
		        {
		        	this.${field.name}=null;
		        }
	#else 
		        if(null==map.get("${field.name}"))
		        {
		        	this.${field.name}=null;
		        }else
		        {
		        	this.${field.name}=(${field.type})map.get("${field.name}");
		        }
		        
	#end
		    }
	#end
		}
		/**
		*map值  set到DTO  不处理NULL值
		*/

			public void doMapToColumnValueNullNoValid(Map map) {
		#foreach($field in ${dtoInfo.fields})
			    if(null!=map.get("${field.name}"))
			    {
		#if($BIGDECIMAL == ${field.type})
		             if(map.get("${field.name}") instanceof BigDecimal)
		             {
		                 this.${field.name}=(${field.type})map.get("${field.name}");
		             }else if(map.get("${field.name}") instanceof String)
		             {
		                 if(!"".equals(map.get("${field.name}").toString().trim()))
			             {
				           this.${field.name}=new ${field.type}(map.get("${field.name}").toString().trim());
				         }else
				         {
				           this.${field.name}=null;
				         }
		             }
		#elseif($DATE == ${field.type})
			        if(map.get("${field.name}") instanceof java.util.Date)
			        {
			           this.${field.name}=new ${field.type}(((java.util.Date)map.get("${field.name}")).getTime());
			        }else if(map.get("${field.name}") instanceof String)
			        {
			        	try{
			                if(!"".equals(map.get("${field.name}")))
			                {
							  this.${field.name}=new ${field.type}(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("${field.name}").toString().trim()).getTime());
						    }else
						    {
						      this.${field.name}=null;
						    }
					    } catch (Exception e) {
							throw new RuntimeException(e.getMessage());
						}
			        }else
			        {
			           this.${field.name}=(${field.type})map.get("${field.name}");
			        }
						#elseif($TIMESTAMP == ${field.type})
			        if(map.get("${field.name}") instanceof java.sql.Timestamp)
		        	{
		           		this.${field.name}=(${field.type})map.get("${field.name}");
		        	}else if(map.get("${field.name}") instanceof java.sql.Date)
		        	{
		           		this.${field.name}=new ${field.type}(((java.sql.Date)map.get("${field.name}")).getTime());
		        	}else if(map.get("${field.name}") instanceof java.util.Date)
		        	{
		           		this.${field.name}=new ${field.type}(((java.util.Date)map.get("${field.name}")).getTime());
		        	}else if(map.get("${field.name}") instanceof String)
			        {
			        	try{
			                if(!"".equals(map.get("${field.name}")))
			                {
							  this.${field.name}=new ${field.type}(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("${field.name}").toString().trim()).getTime());
						    }else
						    {
						      this.${field.name}=null;
						    }
					    } catch (Exception e) {
							throw new RuntimeException(e.getMessage());
						}
			        }else
			        {
			           this.${field.name}=(${field.type})map.get("${field.name}");
			        }
		#else 
			        this.${field.name}=(${field.type})map.get("${field.name}");
		#end
			    }
		#end
			}
	
	
/**
*map值  set到dto pk属性
*/
	public void doMapToPk(Map map) {
		
#foreach($pk in ${dtoInfo.pks})

	    if(null!=map.get("${pk.name}"))
	    {
	      this.${pk.name}=(${pk.type})map.get("${pk.name}");
	    }
#end
		
		
	}
/**
*dto 属性值put到map
*/
	public Map getColumnValueToMap() {
		Map map=new HashMap();
#foreach($field in ${dtoInfo.fields})
    	map.put("${field.name}",this.${field.name});
#end
		return map;
		
	}
/**
*pk 属性值put到map
*/
	public Map getPkToMap() {
		Map map=new HashMap();
#foreach($pk in ${dtoInfo.pks})
    	map.put("${pk.name}",this.${pk.name});
#end
		return map;
	}
	
	 /**
    *  Columns
    */
	public Map getColumnNames() {
		Map map=new HashMap();
#foreach($field in ${dtoInfo.fields})
    	map.put("${field.column.name}","${field.type}");
#end
		return map;
		
	}
	 /**
    *  Table Name
    */
    public  String getTableName(){
        return "${dtoInfo.tableInfo.tablename}";
    }
    /**
     * Encrypt Columns
     */
    public String[] getEncryptColumnNames(){
#set( $encryptnum = 0 )
    	String[] columnNames = new String[$encryptColumnList.size()];
#foreach($encryptColumn in ${encryptColumnList})
    	columnNames[$encryptnum]="$encryptColumn";
#set( $encryptnum = $encryptnum + 1 )
#end
        return columnNames;
    }
    
}
