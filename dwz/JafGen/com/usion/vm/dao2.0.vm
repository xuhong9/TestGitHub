#################################################################
##
##               variable
##
#################################################################
#set( $DTO_NAME = "${dtoInfo.dtoName}${orm_suffix_dto}" )  ## dto name
#set( $PK_NAME  = "${dtoInfo.dtoName}${orm_suffix_pk}"  )  ## pk name

#set( $HAS_CHILD = 0)
#set( $CHILD_DTO_NAME = "")
#set( $CHILD_TABLE_NAME = ${parentChildrenRels.getChildTableName("${dtoInfo.dtoName}")})
#set( $KEYS = ${parentChildrenRels.getReferenceColumns("${dtoInfo.dtoName}")})
#if(${parentChildrenRels.isParent("${dtoInfo.dtoName}")})
  #set( $HAS_CHILD = 1)
  #set( $CHILD_DTO_NAME=${parentChildrenRels.getChildTableDto("${dtoInfo.dtoName}")})
  #set( $CHILD_DTO_NAME="$CHILD_DTO_NAME${orm_suffix_dto}")
#end


#set($CURRENT = "DbHelper.getTimestampType()") 
#set($WITHRS = "DbHelper.getRsForUpdate()") 

#######################################################
package ${daoPkg};

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp ;
import java.sql.Clob;

import com.cfcc.jaf.persistence.dao.exception.ZeroRowsUpdatedException;
import com.cfcc.jaf.persistence.jaform.parent.* ;

import java.math.BigDecimal;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;

import java.io.StringReader;
import java.io.Reader;
import java.io.IOException;
import com.cfcc.yak.base.persistence.ibeanorm.parent.YakIDao;
import com.cfcc.yak.base.persistence.DbHelper;

import ${dtoPkg}.$DTO_NAME ;
import ${pkPkg}.$PK_NAME ;

#if($HAS_CHILD==1)
import ${dtoPkg}.$CHILD_DTO_NAME;
import com.cfcc.jaf.persistence.jaform.config.OrmapFactory;
#end

/**
 * <p>Title: DAO of table: ${dtoInfo.tableInfo.tablename}</p>
 * <p>Description:$!{dtoInfo.tableInfo.tableremarks} Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2015</p>
 * <p>Company: USION </p>
 * <p>Generation Time: ${generationTime} </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2015-10-28 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author ${generator}
 */

public class ${dtoInfo.dtoName}${orm_suffix_dao}  implements YakIDao
{
#set ($lineCount = 5)
#set ($count = 0)
#set ($count_real = 0)

#*=======================================================================================================================
#
#			SQL String
#
#=======================================================================================================================*#
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO ${dtoInfo.tableInfo.tablename} ("
#foreach($field in $dtoInfo.fields)#if(($count % $lineCount) == 0)          + "#end
#set ($count = $count + 1)#if(!${field.column.isGenerated()} || ${dbType}!="INFORMIX")#if($count_real!=0),#end#set ($count_real = $count_real + 1)${field.column.name}#end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.fields.size()))
"
#end
#end
#set ($count = 0)
#set ($count_real=0)
        + ") VALUES ("
        + "#foreach($field in $dtoInfo.fields)#if(!${field.column.isGenerated()} || ${dbType}!="INFORMIX")#if($count_real!=0),#end#set ($count_real = $count_real + 1)#if(${field.column.name} == $columnModifyNumber)0#elseif(${field.column.name} == $columnCreateTimeStamp)"+$CURRENT+"#elseif(${field.column.name} == $columnUpdateTimeStamp)"+$CURRENT+" #elseif(${field.column.isGenerated()})DEFAULT #else?#end#end#set ($count = $count + 1)#end)";

#set ($count = 0)

    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
#foreach($field in $dtoInfo.fields)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)${dtoInfo.tableInfo.tablename}.${field.column.name}#if($count != $dtoInfo.fields.size()), #else #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.fields.size()))
"
#end
#end
        + "FROM ${dtoInfo.tableInfo.tablename} "
#if(${dtoInfo.pksSize}>0)
        +" WHERE " 
#set ($count = 0)
#foreach($field in $dtoInfo.pks)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)${field.column.name} = ?#if($count != $dtoInfo.pks.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.pks.size()))
"
#end
#end
#end        ;
#set ($count = 0)
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
#foreach($field in $dtoInfo.fields)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)${dtoInfo.tableInfo.tablename}.${field.column.name}#if($count != $dtoInfo.fields.size()), #else #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.fields.size()))
"
#end
#end
        + "FROM ${dtoInfo.tableInfo.tablename} "
#if(${dtoInfo.pksSize}>0)
        +" WHERE " 
#set ($count = 0)
#foreach($field in $dtoInfo.pks)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)${field.column.name} = ?#if($count != $dtoInfo.pks.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.pks.size()))
#if(${dbType}=="SYBASE")
 "
#else
 FOR UPDATE "
#end
#if(${dbType}=="DB2")
        +  $WITHRS+" "
#end
#end
#end
#end        ;

 #set ($count = 0)
     /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
#foreach($field in $dtoInfo.fields)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)#if($field.column.isScrollInsensitive()) #if($count != 1),#end ${dtoInfo.tableInfo.tablename}.${field.column.name} #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.fields.size()))
"
#end
#end
        + "FROM ${dtoInfo.tableInfo.tablename} ";



 #set ($count = 0)
   /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
#foreach($field in $dtoInfo.fields)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)${dtoInfo.tableInfo.tablename}.${field.column.name}#if($count != $dtoInfo.fields.size()), #else #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.fields.size()))
"
#end
#end
        + "FROM ${dtoInfo.tableInfo.tablename} " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
#set ($count = 0)
#foreach($field in $dtoInfo.pks)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)${field.column.name} = ?#if($count != $dtoInfo.pks.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.pks.size()))
)"
#end
#end        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE ${dtoInfo.tableInfo.tablename} SET "
#set ($count = 0)
#set ($count_real = 0)
#foreach($field in $dtoInfo.nonPks)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)
#if(${field.column.name} == $columnModifyNumber)${field.column.name} =${columnModifyNumber}+1#elseif(${field.column.name} == $columnCreateTimeStamp)${field.column.name} =${columnCreateTimeStamp}#elseif(${field.column.name} == $columnUpdateTimeStamp)${field.column.name} ="+$CURRENT+"#elseif(${field.column.isGenerated()} || ${field.type} == "byte[]" || ${field.type} == "Clob") #else${field.column.name} =?#end
#if(($count != $dtoInfo.nonPks.size()) &&(!${field.column.isGenerated()})  && (${field.type} != "byte[]")  && (${field.type} != "Clob"))#set($lastfield =$dtoInfo.nonPks.get($count) )#set($lastcount =$count+1 )#if((${lastfield.type} == "byte[]")||(${lastfield.type} == "Clob"))#if(($lastcount != $dtoInfo.nonPks.size())),#end#else,#end#end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.nonPks.size()))
 "
#end
#end
#set ($count = 0)
#if(${dtoInfo.pksSize}>0)
        + "WHERE "
#foreach($field in $dtoInfo.pks)
#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)
${field.column.name} = ?#if($count != $dtoInfo.pks.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.pks.size()))
"
#end
#end
#end        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE ${dtoInfo.tableInfo.tablename} SET  "
#set ($count = 0)
#set ($count_real = 0)
#foreach($field in $dtoInfo.nonPks)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)
#if(${field.column.name} == $columnModifyNumber)${field.column.name} =${columnModifyNumber}+1#elseif(${field.column.name} == $columnCreateTimeStamp)${field.column.name} =${columnCreateTimeStamp}#elseif(${field.column.name} == $columnUpdateTimeStamp)${field.column.name} ="+$CURRENT+"#elseif(${field.column.isGenerated()}) #else${field.column.name} =?#end
#if(($count != $dtoInfo.nonPks.size()) &&(!${field.column.isGenerated()})), #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.nonPks.size()))
 "
#end
#end
#set ($count = 0)
#if(${dtoInfo.pksSize}>0)
        + "WHERE "
#foreach($field in $dtoInfo.pks)
#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)
${field.column.name} = ?#if($count != $dtoInfo.pks.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.pks.size()))
"
#end
#end
#end        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM ${dtoInfo.tableInfo.tablename} " 
#if(${dtoInfo.pksSize}>0)
        + " WHERE "
#set ($count = 0)
#foreach($field in $dtoInfo.pks)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)${field.column.name} = ?#if($count != $dtoInfo.pks.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $dtoInfo.pks.size()))
"
#end
#end
#end        ;

#if($HAS_CHILD==1)

    /* SQL to select children */
    private static final String SQL_SELECT_CHILDREN =
        "SELECT *"
        + "FROM $CHILD_TABLE_NAME WHERE "
#set ($count = 0)
#foreach($key in $KEYS)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)$key = ?#if($count != $KEYS.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $KEYS.size()))
"
#end
#end        ;

    /* SQL to delete children */
    private static final String SQL_DELETE_CHILDREN =
        "DELETE FROM $CHILD_TABLE_NAME WHERE "
#set ($count = 0)
#foreach($key in $KEYS)#if(($count % $lineCount) == 0)        + "#end
#set ($count = $count + 1)$key = ?#if($count != $KEYS.size()) AND #end
#if(($count % $lineCount) == 0 || ($count == $KEYS.size()))
"
#end
#end        ;


#end

	/**
	*  $msg_cn.get("PLCXICZDCXDCSSL")
	*/
	
	public static final int FIND_BATCH_SIZE = 150 #if(${dtoInfo.pksSize}>0) / ${dtoInfo.pksSize}#end;
	

#*=======================================================================================================================
#
#			Insert Record
#
#=======================================================================================================================*#

   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     $DTO_NAME dto = ($DTO_NAME)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("$msg_cn.get("CRCWDH")"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
#set ($count = 1)
#foreach($field in ${dtoInfo.fields})
 #if(${field.column.name} != ${columnModifyNumber} && ${field.column.name} != ${columnCreateTimeStamp} &&${field.column.name} != ${columnUpdateTimeStamp} &&!${field.column.isGenerated()})
#if(${field.type} == "Integer" )
         if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
            ps.setNull($count, java.sql.Types.INTEGER);
         else
            ps.setInt($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
         if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
            ps.setNull($count, java.sql.Types.BIGINT);
         else
            ps.setLong($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
         if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
            ps.setNull($count, java.sql.Types.SMALLINT);
         else
            ps.setShort($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
         if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
            ps.setNull($count, java.sql.Types.BLOB);
         else
            ps.setBytes($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#elseif (${field.type} == "Clob" )
         if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
            ps.setNull($count, java.sql.Types.CLOB);
         else
            ps.setCharacterStream($count, new StringReader(dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()),
      										dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().length());
#else
         ps.set${field.type}($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());

#end
#set ($count = $count + 1)
#end
#end
         ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       $DTO_NAME dto = ($DTO_NAME)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("$msg_cn.get("CRCWDH")"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
#set ($count = 1)
#foreach($field in ${dtoInfo.fields})
 #if(${field.column.name} != ${columnModifyNumber} && ${field.column.name} != ${columnCreateTimeStamp} &&${field.column.name} != ${columnUpdateTimeStamp} &&!${field.column.isGenerated()})
#if(${field.type} == "Integer" )
           if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
              ps.setNull($count, java.sql.Types.INTEGER);
           else
              ps.setInt($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
           if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
              ps.setNull($count, java.sql.Types.BIGINT);
           else
              ps.setLong($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
           if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
              ps.setNull($count, java.sql.Types.SMALLINT);
           else
              ps.setShort($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
           if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
              ps.setNull($count, java.sql.Types.BLOB);
           else
              ps.setBytes($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#elseif (${field.type} == "Clob" )
           if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
              ps.setNull($count, java.sql.Types.CLOB);
           else
              ps.setCharacterStream($count, new StringReader(dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()),
      										dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().length());
#else
           ps.set${field.type}($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
#set ($count = $count + 1)
#end
#end
           rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0){
        	   IDto tempDto = (IDto)results.get(0);
        	   tempDto.clearChangedFlag();
        	   return tempDto;
           }
           return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        $DTO_NAME dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = ($DTO_NAME)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("$msg_cn.get("CRCWDH")"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = ($DTO_NAME)_dtos[i] ; 
#set ($count = 1)
#foreach($field in ${dtoInfo.fields})
 #if(${field.column.name} != ${columnModifyNumber} && ${field.column.name} != ${columnCreateTimeStamp} &&${field.column.name} != ${columnUpdateTimeStamp} &&!${field.column.isGenerated()})
 
#if(${field.type} == "Integer" )
               if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                  ps.setNull($count, java.sql.Types.INTEGER);
               else
                  ps.setInt($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
               if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                  ps.setNull($count, java.sql.Types.BIGINT);
               else
                  ps.setLong($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
               if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                  ps.setNull($count, java.sql.Types.SMALLINT);
               else
                  ps.setShort($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
               if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                  ps.setNull($count, java.sql.Types.BLOB);
               else
                  ps.setBytes($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#elseif (${field.type} == "Clob" )
               if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                  ps.setNull($count, java.sql.Types.CLOB);
               else
                  ps.setCharacterStream($count, new StringReader(dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()),
      										dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().length());
#else
               ps.set${field.type}($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
#set ($count = $count + 1)
#end
#end
               ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }


#*=======================================================================================================================
#
#			Retrieve one record
#
#=======================================================================================================================*#

/**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       return find(_pk,  conn,  isLobSupport,null);
    }

    public IDto findBackfill(IPK pk, Connection conn, boolean isLobSupport,
			IDto backfillBean) throws SQLException {
		// TODO Auto-generated method stub
    	return find(  pk,   conn,   isLobSupport, null, backfillBean); 
	}
 
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport,Class dtoclass ) throws SQLException
    {
    	return find(  _pk,   conn,   isLobSupport, dtoclass,null ); 
    }
    
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport,Class dtoclass,IDto backfillBean) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("$msg_cn.get("CZCWDH")"+msgValid) ;
       }
        	
       

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
#set ($count = 1)
#foreach($field in ${dtoInfo.pks})
#if($count == 1)
		   $PK_NAME pk = ($PK_NAME)_pk ;
#end		   
#if(${field.type} == "Integer" )
           if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.INTEGER);
           else
               ps.setInt($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
           if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.BIGINT);
           else
               ps.setLong($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
           if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.SMALLINT);
           else
               ps.setShort($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
           if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.BLOB);
           else
               ps.setBytes($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#else
           ps.set${field.type}($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
#set ($count = $count + 1)
#end
           rs = ps.executeQuery();
           if (backfillBean!=null){
        	  return getResults(rs,0,isLobSupport,backfillBean);
           }else{
           List results = getResults(rs,dtoclass,0,isLobSupport);
           if (results!=null && results.size() > 0){
        	   IDto tempDto = (IDto)results.get(0);
        	   tempDto.clearChangedFlag();
        	   return tempDto;
           }
           } 
           return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("$msg_cn.get("CZCWDH")"+msgValid) ;
       }

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
#set ($count = 1)
#foreach($field in ${dtoInfo.pks})
#if($count == 1)
		   $PK_NAME pk = ($PK_NAME)_pk ;
#end
#if(${field.type} == "Integer" )

           if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.INTEGER);
           else
               ps.setInt($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
           if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.BIGINT);
           else
               ps.setLong($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
           if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.SMALLINT);
           else
               ps.setShort($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
           if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull($count, java.sql.Types.BLOB);
           else
               ps.setBytes($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#else
           ps.set${field.type}($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
#set ($count = $count + 1)

#end
           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0){
        	   IDto tempDto = (IDto)results.get(0);
        	   tempDto.clearChangedFlag();
        	   return tempDto;
           }
           return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
  /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
       return find(_pks, conn, isLobSupport,null);
    }
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport,Class dtoclass) throws SQLException
    {
        $PK_NAME pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = ($PK_NAME)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = ($PK_NAME)(pks.get(i)) ; 
#set ($count = 1)
#foreach($field in ${dtoInfo.pks})
#if(${field.type} == "Integer" )
                   if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                      ps.setNull((i-iBegin)*${dtoInfo.pksSize}+ $count , java.sql.Types.INTEGER);
                   else
                     ps.setInt((i-iBegin)*${dtoInfo.pksSize}+$count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
                   if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                      ps.setNull((i-iBegin)*${dtoInfo.pksSize}+$count, java.sql.Types.BIGINT);
                   else
                      ps.setLong((i-iBegin)*${dtoInfo.pksSize}+$count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
                   if (pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                      ps.setNull((i-iBegin)*${dtoInfo.pksSize}+$count, java.sql.Types.SMALLINT);
                   else
                      ps.setShort((i-iBegin)*${dtoInfo.pksSize}+$count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
                   if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                      ps.setNull($count, java.sql.Types.BLOB);
                   else
                      ps.setBytes($count, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#else
                   ps.set${field.type}((i-iBegin)*${dtoInfo.pksSize}+$count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
#set ($count = $count + 1)

#end
			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,dtoclass,0,isLobSupport)); 
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results.size() > 0)
        {
        	for(int i=0;i<results.size();i++){
        		IDto tempDto = (IDto) results.get(i);
        		tempDto.clearChangedFlag();
        	}
            $DTO_NAME[] dtos=new $DTO_NAME[0];
		    return ($DTO_NAME[]) results.toArray(dtos) ;
		   
        }
        return null;
    }

  
  
  



    /**
	    * $msg_cn.get("DDCXYJ")
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   
#*=======================================================================================================================
#
#			populate records
#
#=======================================================================================================================*#
	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
	
	
	
	 public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        
        return getResults(rs,null,maxSize,isLobSupport);
    }
	
	
	 public List getResults(ResultSet rs, Class dtoclass, int maxSize,
				boolean isLobSupport ) throws SQLException {
			// TODO Auto-generated method stub
			return getResults(  rs,   dtoclass,   maxSize,
					  isLobSupport ,null);
		}

		public IDto getResults(ResultSet rs, int maxSize, boolean isLobSupport,
				IDto backfillBean) throws SQLException {
			// TODO Auto-generated method stub
			  List list= getResults(  rs,   null,   maxSize,
					  isLobSupport ,backfillBean);
			  if (list!=null && list.size()>0){
				  return (IDto) list.get(0);
			  }else{
				  return null;
			  }
		}
	
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, Class dtoclass,int maxSize, boolean isLobSupport, IDto backfillBean) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             $DTO_NAME  dto = null;
              if((dtoclass==null) && (backfillBean==null))
             {
                dto = new  $DTO_NAME ();
             }else if(backfillBean!=null)
             {
                try {
                	 dto=($DTO_NAME) (($DTO_NAME) backfillBean).clone();
 				} catch (CloneNotSupportedException e) {
 					// TODO Auto-generated catch block
 					throw new SQLException();
 				}
             }else
             {
                try
                {
                  dto=($DTO_NAME) dtoclass.newInstance();
                }catch(Throwable e)
                {
                  throw new SQLException(dtoclass+"初始化异常");
                }
             }
#set ($count = 0)
#foreach($field in ${dtoInfo.fields})
             //${field.column.name}
#if(${field.type} == "Integer" )
             str = rs.getString("${field.column.name}");
             if(str!=null){
                dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(new Integer(str));
             }
#elseif (${field.type} == "Long" )
             str = rs.getString("${field.column.name}");
             if(str!=null){
                dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(new Long(str));
             }
#elseif (${field.type} == "Short" )
             str = rs.getString("${field.column.name}");
             if(str!=null){
                dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(new Short(str));
             }
#elseif (${field.type} == "String" )
             str = rs.getString("${field.column.name}");
             if (str == null)
                dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(null);
             else
                dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(str.trim());
#elseif (${field.type} == "byte[]" )
		    if(isLobSupport){
              	dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(rs.getBytes("${field.column.name}"));
            }
#elseif (${field.type} == "Clob" )
    		if(isLobSupport){
               clob =rs.getClob("${field.column.name}");
               if(clob!=null){
               reader = clob.getCharacterStream();
               chars = new char[(int)clob.length()];
               try {
			      reader.read(chars);
                  reader.close();
               } catch (IOException e) {
                  throw new SQLException("$msg_cn.get("DQCLOBZDCXMH")" + e.getMessage());
               }
               dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(new String(chars));
            }
         }
#else
           dto.${NamingConvention.getSetterFromColumnName("${field.column.name}")}(rs.get${field.type}("${field.column.name}"));
#end

#set ($count = $count + 1)
#end

			dto.clearChangedFlag();
            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

#if($HAS_CHILD==1)
      IDao dao = OrmapFactory.getDao(_dto.getName());
    
      List results = dao.getResults(rs);
      
      if (results!=null && results.size() > 0)
      {
          for(int i=0;i<results.size();i++){
        		IDto tempDto = (IDto) results.get(i);
        		tempDto.clearChangedFlag();
        	}
	      $CHILD_DTO_NAME[] children = new $CHILD_DTO_NAME[0];
	      children = ($CHILD_DTO_NAME[]) results.toArray(children) ;
	      return children ;
               
       }

       return null;
      
    
      
      
#else
      throw new SQLException("$msg_cn.get("BDTOMYYQTDTOXGL")");
#end
  }
#*=======================================================================================================================
#
#			Update Record
#
#=======================================================================================================================*#

     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException, ZeroRowsUpdatedException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("$msg_cn.get("XGCWDH")"+msgValid) ;
        $DTO_NAME dto = ($DTO_NAME)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
#foreach($field in $dtoInfo.nonPks)
            //${field.column.name}
#if(${field.column.name} != ${columnModifyNumber} && ${field.column.name} != ${columnCreateTimeStamp} &&${field.column.name} != ${columnUpdateTimeStamp} && (!${field.column.isGenerated()}))
#if(${field.type} == "Integer" )
            if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                ps.setNull(pos, java.sql.Types.INTEGER);
            else
                ps.setInt(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
            pos++;
#elseif (${field.type} == "Long" )
            if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull(pos, java.sql.Types.BIGINT);
            else
               ps.setLong(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
            pos++;
#elseif (${field.type} == "Short" )
            if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
               ps.setNull(pos, java.sql.Types.SMALLINT);
            else
               ps.setShort(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
            pos++;      
#elseif (${field.type} == "byte[]" )
            if(isLobSupport){
                if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                    ps.setNull(pos, java.sql.Types.BLOB);
                else
                    ps.setBytes(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
                pos++;
            }
#elseif (${field.type} == "Clob" )
            if(isLobSupport){
                if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                   ps.setNull(pos, java.sql.Types.CLOB);
                else
                   ps.setCharacterStream(pos, new StringReader(dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()),
      										dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().length());
                pos++;
            }
#else
            ps.set${field.type}(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
            pos++;
#end

#end
#end

#foreach($field in $dtoInfo.pks)
           //${field.column.name}
#if(${field.type} == "Integer" )
           ps.setInt(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
           ps.setLong(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
           ps.setShort(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#else
           ps.set${field.type}(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
           pos++;
#end
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 $DTO_NAME dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = ($DTO_NAME)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("$msg_cn.get("XGCWDH")"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = ($DTO_NAME)_dtos[i] ; 
                int pos = 1;
#foreach($field in $dtoInfo.nonPks)
                //${field.column.name}
 #if(${field.column.name} != ${columnModifyNumber} && ${field.column.name} != ${columnCreateTimeStamp} &&${field.column.name} != ${columnUpdateTimeStamp} && (!${field.column.isGenerated()}))
#if(${field.type} == "Integer" )
                if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                   ps.setNull(pos, java.sql.Types.INTEGER);
                else
                   ps.setInt(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
                pos++ ;
#elseif (${field.type} == "Long" )
                if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                   ps.setNull(pos, java.sql.Types.BIGINT);
                else
                   ps.setLong(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
                pos++;
#elseif (${field.type} == "Short" )
                if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                   ps.setNull(pos, java.sql.Types.SMALLINT);
                else
                   ps.setShort(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
                pos++;
#elseif (${field.type} == "byte[]" )
                if(isLobSupport){
                    if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                       ps.setNull(pos, java.sql.Types.BLOB);
                    else
                       ps.setBytes(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
                    pos++;
                }
#elseif (${field.type} == "Clob" )
                if(isLobSupport){
                    if (dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()==null)
                       ps.setNull(pos, java.sql.Types.CLOB);
                    else
                       ps.setCharacterStream(pos, new StringReader(dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}()),
      										dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().length());
                    pos++;
                } 
#else
                ps.set${field.type}(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
                pos++;
#end

#end
#end

#foreach($field in $dtoInfo.pks)
               //${field.column.name}
#if(${field.type} == "Integer" )
               ps.setInt(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
               ps.setLong(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
               ps.setShort(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#else
               ps.set${field.type}(pos, dto.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
               pos++;
#end
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }

#*=======================================================================================================================
#
#			Delete Record
#
#=======================================================================================================================*#

    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("$msg_cn.get("SCCWDH")"+msgValid) ;
       }

       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
#set ($count = 1)
#foreach($field in $dtoInfo.pks)
#if($count == 1)
		   $PK_NAME pk = ($PK_NAME)_pk ;
#end
#if(${field.type} == "Integer" )
           ps.setInt($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
           ps.setLong($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
           ps.setShort($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
           ps.setBytes($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#else
           ps.set${field.type}($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
#set ($count = $count + 1)
#end
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        $PK_NAME pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = ($PK_NAME)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = ($PK_NAME)(pks.get(i)) ; 
#set ($count = 1)
#foreach($field in $dtoInfo.pks)
#if(${field.type} == "Integer" )
                ps.setInt($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().intValue());
#elseif (${field.type} == "Long" )
                ps.setLong($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().longValue());
#elseif (${field.type} == "Short" )
                ps.setShort($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}().shortValue());
#elseif (${field.type} == "byte[]" )
                ps.setBytes($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#else
                ps.set${field.type}($count, pk.${NamingConvention.getGetterFromColumnName("${field.column.name}")}());
#end
#set ($count = $count + 1)
#end
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }

#*=======================================================================================================================
#
#			Check for update,delete
#
#=======================================================================================================================*#

    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
#set ($haveChangeNumber = 0)
#foreach($field in $dtoInfo.nonPks)
   #if (${field.column.name} == ${columnChecked})
     #set ($haveChangeNumber = 1)
   #end
#end
#if(($haveChangeNumber == 1))

		$DTO_NAME dtoNew = ($DTO_NAME)_dto ;
		$DTO_NAME dtoOld =($DTO_NAME) findForUpdate(_dto.getPK(), conn,false) ;
		if (dtoOld != null) {
			if (! dtoOld.${NamingConvention.getGetterFromColumnName("${columnChecked}")}().equals(dtoNew.${NamingConvention.getGetterFromColumnName("${columnChecked}")}()))
				throw new SQLException("$msg_cn.get("SJKBMH")${dtoInfo.tableInfo.tablename}$msg_cn.get("JLYJBXG")"+dtoOld.${NamingConvention.getGetterFromColumnName("${columnChecked}")}()+"$msg_cn.get("DQJLXGCSW")"+dtoNew.${NamingConvention.getGetterFromColumnName("${columnChecked}")}()) ;
		}else{
			throw new SQLException("$msg_cn.get("SJKBMH")${dtoInfo.tableInfo.tablename}$msg_cn.get("JLJJBSC")");
		}
#else
		throw new SQLException("$msg_cn.get("SJKBMH")${dtoInfo.tableInfo.tablename}$msg_cn.get("MYJCXGDZD")");
#end
    }
#*=======================================================================================================================
#
#        OPERATION WITH CHILDREN
#			
#
#=======================================================================================================================*#

	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
#if($HAS_CHILD == 1)
      $DTO_NAME dto = ($DTO_NAME)_dto ;
      //set keys for children
     
      if(dto.get${CHILD_DTO_NAME}s()!=null){
          for(int i=0;i<dto.get${CHILD_DTO_NAME}s().length;i++){
  #foreach($key in $KEYS)
              //$key
              dto.get${CHILD_DTO_NAME}s()[i].${NamingConvention.getSetterFromColumnName("${key}")}(dto.${NamingConvention.getGetterFromColumnName("${key}")}());
  #end
          }
       }
#else
       throw new SQLException("$msg_cn.get("BJLMYYQTJLXGL")");
#end
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
#if($HAS_CHILD == 1)
        $DTO_NAME dto = ($DTO_NAME)_dto ;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_CHILDREN);
#set ($count = 1)
#foreach($key in ${KEYS})
#set( $keyType=${dtoInfo.getFieldType( "${NamingConvention.getFieldNameFromColumnName(${key})}" )} )

        //field ${key}  type: ${keyType}
#if($keyType == "Integer" )
            if (dto.${NamingConvention.getGetterFromColumnName("${key}")}()==null)
                throw new SQLException("$msg_cn.get("ZDMH") $key $msg_cn.get("BNWKFH")");
            ps.setInt($count, dto.${NamingConvention.getGetterFromColumnName("${key}")}().intValue());
#elseif ($keyType == "Long" )
            if (dto.${NamingConvention.getGetterFromColumnName("${key}")}()==null)
                throw new SQLException("$msg_cn.get("ZDMH") $key $msg_cn.get("BNWKFH")");
            ps.setLong($count, dto.${NamingConvention.getGetterFromColumnName("${key}")}().longValue());
#elseif ($keyType == "Short" )
            if (dto.${NamingConvention.getGetterFromColumnName("${key}")}()==null)
                throw new SQLException("$msg_cn.get("ZDMH") $key $msg_cn.get("BNWKFH")");
            ps.setShort($count, dto.${NamingConvention.getGetterFromColumnName("${key}")}().shortValue());
#else
            if (dto.${NamingConvention.getGetterFromColumnName("${key}")}()==null)
                throw new SQLException("$msg_cn.get("ZDMH") $key $msg_cn.get("BNWKFH")");
            ps.set${keyType}($count, dto.${NamingConvention.getGetterFromColumnName("${key}")}());
#end
#set ($count = $count + 1)
#end

            rs = ps.executeQuery();
            IDto[] cl = getChildrenResults(rs,this.getChildrenClass());
            return cl;
        }finally {
            close(ps);
            close(rs);
        }

#else
         throw new SQLException("$msg_cn.get("CDTOMYXGLDZDTO")");
#end
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
#if($HAS_CHILD == 1)
      return ${CHILD_DTO_NAME}.class ;
#else
	  return null;
#end
  };    
#*=======================================================================================================================
#
#			Close
#
#=======================================================================================================================*#


    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {
            	//
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e)
            {
            	//
            }
        }
    }
  
}
