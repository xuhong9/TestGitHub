package com.usion.common.persistence.dto;

import java.sql.Date;
import java.sql.Timestamp ;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;

import com.cfcc.jaf.persistence.jaform.parent.IDto ;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.usion.common.persistence.pk.UsionBerthPK;

import codegen.parent.PersistenceGlobalProperties;
import codegen.parent.YakIDto;
import codegen.parent.YakIPkGen;
/**
 * <p>Title: DTO of table: usion_berth</p>
 * <p>Description:  Data Transfer Object </p>
 * <p>Copyright: Copyright (c) 2015</p>
 * <p>Company: USION </p>
 * <p>Generation Time: 2015-10-28 12:37:48 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dto.vm version timestamp: 2015-10-28 08:30:00
 *
 * @author Administrator
 */


public class UsionBerthDto   
                              implements YakIDto  {

     private static final long serialVersionUID = 1L;
/********************************************************
 *   fields
 ********************************************************/

    /**
    *  ID VARCHAR , PK   , NOT NULL       */
    protected String id;
    /**
    *  BERTHCODE VARCHAR         */
    protected String berthcode;
    /**
    *  PROVINCECODE VARCHAR         */
    protected String provincecode;
    /**
    *  CITYCODE VARCHAR         */
    protected String citycode;
    /**
    *  ZONECODE VARCHAR         */
    protected String zonecode;
    /**
    *  AREANAME VARCHAR         */
    protected String areaname;
    /**
    *  BUSINESSAREANAME VARCHAR         */
    protected String businessareaname;
    /**
    *  PARKNAME VARCHAR         */
    protected String parkname;
    /**
    *  INUSEFLAG VARCHAR   , NOT NULL       */
    protected String inuseflag;
    /**
    *  BERTHTYPE VARCHAR         */
    protected String berthtype;
    /**
    *  ENTERPRISEINFO VARCHAR         */
    protected String enterpriseinfo;
    /**
    *  LNGINFO VARCHAR         */
    protected String lnginfo;
    /**
    *  LATINFO VARCHAR         */
    protected String latinfo;
    /**
    *  ACTIVEDATE DATE         */
    protected Date activedate;
    /**
    *  CLOSEDATE DATE         */
    protected Date closedate;
    /**
    *  STATUS VARCHAR         */
    protected String status;
    /**
    *  CREATETIME TIMESTAMP   , NOT NULL       */
    protected Timestamp createtime;
    /**
    *  UPDATETIME TIMESTAMP   , NOT NULL       */
    protected Timestamp updatetime;

	/**
	 * 标记当前被修改过的列及其原始值
	 */
	protected Map changedValues = new HashMap();
	

/******************************************************
*
*  getter and setter
*
*******************************************************/


     /**
     *   Getter ID, PK , NOT NULL        * */
    public String getId()
    {
        return id;
    }
     /**
     *   Setter ID, PK , NOT NULL        * */
    public void setId(String _id) {
		if (!changedValues.containsKey(columnId())) {
			changedValues.put(columnId(), this.id);
		}
        this.id = _id;
    }


     /**
     *   Getter BERTHCODE        * */
    public String getBerthcode()
    {
        return berthcode;
    }
     /**
     *   Setter BERTHCODE        * */
    public void setBerthcode(String _berthcode) {
		if (!changedValues.containsKey(columnBerthcode())) {
			changedValues.put(columnBerthcode(), this.berthcode);
		}
        this.berthcode = _berthcode;
    }


     /**
     *   Getter PROVINCECODE        * */
    public String getProvincecode()
    {
        return provincecode;
    }
     /**
     *   Setter PROVINCECODE        * */
    public void setProvincecode(String _provincecode) {
		if (!changedValues.containsKey(columnProvincecode())) {
			changedValues.put(columnProvincecode(), this.provincecode);
		}
        this.provincecode = _provincecode;
    }


     /**
     *   Getter CITYCODE        * */
    public String getCitycode()
    {
        return citycode;
    }
     /**
     *   Setter CITYCODE        * */
    public void setCitycode(String _citycode) {
		if (!changedValues.containsKey(columnCitycode())) {
			changedValues.put(columnCitycode(), this.citycode);
		}
        this.citycode = _citycode;
    }


     /**
     *   Getter ZONECODE        * */
    public String getZonecode()
    {
        return zonecode;
    }
     /**
     *   Setter ZONECODE        * */
    public void setZonecode(String _zonecode) {
		if (!changedValues.containsKey(columnZonecode())) {
			changedValues.put(columnZonecode(), this.zonecode);
		}
        this.zonecode = _zonecode;
    }


     /**
     *   Getter AREANAME        * */
    public String getAreaname()
    {
        return areaname;
    }
     /**
     *   Setter AREANAME        * */
    public void setAreaname(String _areaname) {
		if (!changedValues.containsKey(columnAreaname())) {
			changedValues.put(columnAreaname(), this.areaname);
		}
        this.areaname = _areaname;
    }


     /**
     *   Getter BUSINESSAREANAME        * */
    public String getBusinessareaname()
    {
        return businessareaname;
    }
     /**
     *   Setter BUSINESSAREANAME        * */
    public void setBusinessareaname(String _businessareaname) {
		if (!changedValues.containsKey(columnBusinessareaname())) {
			changedValues.put(columnBusinessareaname(), this.businessareaname);
		}
        this.businessareaname = _businessareaname;
    }


     /**
     *   Getter PARKNAME        * */
    public String getParkname()
    {
        return parkname;
    }
     /**
     *   Setter PARKNAME        * */
    public void setParkname(String _parkname) {
		if (!changedValues.containsKey(columnParkname())) {
			changedValues.put(columnParkname(), this.parkname);
		}
        this.parkname = _parkname;
    }


     /**
     *   Getter INUSEFLAG , NOT NULL        * */
    public String getInuseflag()
    {
        return inuseflag;
    }
     /**
     *   Setter INUSEFLAG , NOT NULL        * */
    public void setInuseflag(String _inuseflag) {
		if (!changedValues.containsKey(columnInuseflag())) {
			changedValues.put(columnInuseflag(), this.inuseflag);
		}
        this.inuseflag = _inuseflag;
    }


     /**
     *   Getter BERTHTYPE        * */
    public String getBerthtype()
    {
        return berthtype;
    }
     /**
     *   Setter BERTHTYPE        * */
    public void setBerthtype(String _berthtype) {
		if (!changedValues.containsKey(columnBerthtype())) {
			changedValues.put(columnBerthtype(), this.berthtype);
		}
        this.berthtype = _berthtype;
    }


     /**
     *   Getter ENTERPRISEINFO        * */
    public String getEnterpriseinfo()
    {
        return enterpriseinfo;
    }
     /**
     *   Setter ENTERPRISEINFO        * */
    public void setEnterpriseinfo(String _enterpriseinfo) {
		if (!changedValues.containsKey(columnEnterpriseinfo())) {
			changedValues.put(columnEnterpriseinfo(), this.enterpriseinfo);
		}
        this.enterpriseinfo = _enterpriseinfo;
    }


     /**
     *   Getter LNGINFO        * */
    public String getLnginfo()
    {
        return lnginfo;
    }
     /**
     *   Setter LNGINFO        * */
    public void setLnginfo(String _lnginfo) {
		if (!changedValues.containsKey(columnLnginfo())) {
			changedValues.put(columnLnginfo(), this.lnginfo);
		}
        this.lnginfo = _lnginfo;
    }


     /**
     *   Getter LATINFO        * */
    public String getLatinfo()
    {
        return latinfo;
    }
     /**
     *   Setter LATINFO        * */
    public void setLatinfo(String _latinfo) {
		if (!changedValues.containsKey(columnLatinfo())) {
			changedValues.put(columnLatinfo(), this.latinfo);
		}
        this.latinfo = _latinfo;
    }


     /**
     *   Getter ACTIVEDATE        * */
    public Date getActivedate()
    {
        return activedate;
    }
     /**
     *   Setter ACTIVEDATE        * */
    public void setActivedate(Date _activedate) {
		if (!changedValues.containsKey(columnActivedate())) {
			changedValues.put(columnActivedate(), this.activedate);
		}
        this.activedate = _activedate;
    }


     /**
     *   Getter CLOSEDATE        * */
    public Date getClosedate()
    {
        return closedate;
    }
     /**
     *   Setter CLOSEDATE        * */
    public void setClosedate(Date _closedate) {
		if (!changedValues.containsKey(columnClosedate())) {
			changedValues.put(columnClosedate(), this.closedate);
		}
        this.closedate = _closedate;
    }


     /**
     *   Getter STATUS        * */
    public String getStatus()
    {
        return status;
    }
     /**
     *   Setter STATUS        * */
    public void setStatus(String _status) {
		if (!changedValues.containsKey(columnStatus())) {
			changedValues.put(columnStatus(), this.status);
		}
        this.status = _status;
    }


     /**
     *   Getter CREATETIME , NOT NULL        * */
    public Timestamp getCreatetime()
    {
        return createtime;
    }
     /**
     *   Setter CREATETIME , NOT NULL        * */
    public void setCreatetime(Timestamp _createtime) {
		if (!changedValues.containsKey(columnCreatetime())) {
			changedValues.put(columnCreatetime(), this.createtime);
		}
        this.createtime = _createtime;
    }


     /**
     *   Getter UPDATETIME , NOT NULL        * */
    public Timestamp getUpdatetime()
    {
        return updatetime;
    }
     /**
     *   Setter UPDATETIME , NOT NULL        * */
    public void setUpdatetime(Timestamp _updatetime) {
		if (!changedValues.containsKey(columnUpdatetime())) {
			changedValues.put(columnUpdatetime(), this.updatetime);
		}
        this.updatetime = _updatetime;
    }




/******************************************************
*
*  Get Column Name
*
*******************************************************/
    /**
    *   Getter ID, PK , NOT NULL       * */
    public static String  columnId()
    {
        return "ID";
    }
   
    /**
    *   Getter BERTHCODE       * */
    public static String  columnBerthcode()
    {
        return "BERTHCODE";
    }
   
    /**
    *   Getter PROVINCECODE       * */
    public static String  columnProvincecode()
    {
        return "PROVINCECODE";
    }
   
    /**
    *   Getter CITYCODE       * */
    public static String  columnCitycode()
    {
        return "CITYCODE";
    }
   
    /**
    *   Getter ZONECODE       * */
    public static String  columnZonecode()
    {
        return "ZONECODE";
    }
   
    /**
    *   Getter AREANAME       * */
    public static String  columnAreaname()
    {
        return "AREANAME";
    }
   
    /**
    *   Getter BUSINESSAREANAME       * */
    public static String  columnBusinessareaname()
    {
        return "BUSINESSAREANAME";
    }
   
    /**
    *   Getter PARKNAME       * */
    public static String  columnParkname()
    {
        return "PARKNAME";
    }
   
    /**
    *   Getter INUSEFLAG , NOT NULL       * */
    public static String  columnInuseflag()
    {
        return "INUSEFLAG";
    }
   
    /**
    *   Getter BERTHTYPE       * */
    public static String  columnBerthtype()
    {
        return "BERTHTYPE";
    }
   
    /**
    *   Getter ENTERPRISEINFO       * */
    public static String  columnEnterpriseinfo()
    {
        return "ENTERPRISEINFO";
    }
   
    /**
    *   Getter LNGINFO       * */
    public static String  columnLnginfo()
    {
        return "LNGINFO";
    }
   
    /**
    *   Getter LATINFO       * */
    public static String  columnLatinfo()
    {
        return "LATINFO";
    }
   
    /**
    *   Getter ACTIVEDATE       * */
    public static String  columnActivedate()
    {
        return "ACTIVEDATE";
    }
   
    /**
    *   Getter CLOSEDATE       * */
    public static String  columnClosedate()
    {
        return "CLOSEDATE";
    }
   
    /**
    *   Getter STATUS       * */
    public static String  columnStatus()
    {
        return "STATUS";
    }
   
    /**
    *   Getter CREATETIME , NOT NULL       * */
    public static String  columnCreatetime()
    {
        return "CREATETIME";
    }
   
    /**
    *   Getter UPDATETIME , NOT NULL       * */
    public static String  columnUpdatetime()
    {
        return "UPDATETIME";
    }
   


    /**
    *  Table Name
    */
    public static String tableName(){
        return "usion_berth";
    }
    
    /**
    *  Columns
    */
    public static String[] columnNames(){
        String[] columnNames = new String[18];        
        columnNames[0]="ID";
        columnNames[1]="BERTHCODE";
        columnNames[2]="PROVINCECODE";
        columnNames[3]="CITYCODE";
        columnNames[4]="ZONECODE";
        columnNames[5]="AREANAME";
        columnNames[6]="BUSINESSAREANAME";
        columnNames[7]="PARKNAME";
        columnNames[8]="INUSEFLAG";
        columnNames[9]="BERTHTYPE";
        columnNames[10]="ENTERPRISEINFO";
        columnNames[11]="LNGINFO";
        columnNames[12]="LATINFO";
        columnNames[13]="ACTIVEDATE";
        columnNames[14]="CLOSEDATE";
        columnNames[15]="STATUS";
        columnNames[16]="CREATETIME";
        columnNames[17]="UPDATETIME";
        return columnNames;     
    }
/*******************************************************
*
*  supplementary methods
*
*****************************************************/


    /* return hashCode ,if A.equals(B) that A.hashCode()==B.hashCode() */
	public int hashCode()
	{
  
		int _hash_ = 1;
		
        if(this.id!=null)
          _hash_ = _hash_ * 31+ this.id.hashCode() ;
        if(this.berthcode!=null)
          _hash_ = _hash_ * 31+ this.berthcode.hashCode() ;
        if(this.provincecode!=null)
          _hash_ = _hash_ * 31+ this.provincecode.hashCode() ;
        if(this.citycode!=null)
          _hash_ = _hash_ * 31+ this.citycode.hashCode() ;
        if(this.zonecode!=null)
          _hash_ = _hash_ * 31+ this.zonecode.hashCode() ;
        if(this.areaname!=null)
          _hash_ = _hash_ * 31+ this.areaname.hashCode() ;
        if(this.businessareaname!=null)
          _hash_ = _hash_ * 31+ this.businessareaname.hashCode() ;
        if(this.parkname!=null)
          _hash_ = _hash_ * 31+ this.parkname.hashCode() ;
        if(this.inuseflag!=null)
          _hash_ = _hash_ * 31+ this.inuseflag.hashCode() ;
        if(this.berthtype!=null)
          _hash_ = _hash_ * 31+ this.berthtype.hashCode() ;
        if(this.enterpriseinfo!=null)
          _hash_ = _hash_ * 31+ this.enterpriseinfo.hashCode() ;
        if(this.lnginfo!=null)
          _hash_ = _hash_ * 31+ this.lnginfo.hashCode() ;
        if(this.latinfo!=null)
          _hash_ = _hash_ * 31+ this.latinfo.hashCode() ;
        if(this.activedate!=null)
          _hash_ = _hash_ * 31+ this.activedate.hashCode() ;
        if(this.closedate!=null)
          _hash_ = _hash_ * 31+ this.closedate.hashCode() ;
        if(this.status!=null)
          _hash_ = _hash_ * 31+ this.status.hashCode() ;
        if(this.createtime!=null)
          _hash_ = _hash_ * 31+ this.createtime.hashCode() ;
        if(this.updatetime!=null)
          _hash_ = _hash_ * 31+ this.updatetime.hashCode() ;

		return _hash_;
	
	}

     /* Creates and returns a copy of this object. */
    public Object clone()throws CloneNotSupportedException
    {
    	return super.clone();
      /*  UsionBerthDto bean = new UsionBerthDto();

          bean.id = this.id;

          if (this.berthcode != null)
            bean.berthcode = String.valueOf(this.berthcode);
          if (this.provincecode != null)
            bean.provincecode = String.valueOf(this.provincecode);
          if (this.citycode != null)
            bean.citycode = String.valueOf(this.citycode);
          if (this.zonecode != null)
            bean.zonecode = String.valueOf(this.zonecode);
          if (this.areaname != null)
            bean.areaname = String.valueOf(this.areaname);
          if (this.businessareaname != null)
            bean.businessareaname = String.valueOf(this.businessareaname);
          if (this.parkname != null)
            bean.parkname = String.valueOf(this.parkname);
          if (this.inuseflag != null)
            bean.inuseflag = String.valueOf(this.inuseflag);
          if (this.berthtype != null)
            bean.berthtype = String.valueOf(this.berthtype);
          if (this.enterpriseinfo != null)
            bean.enterpriseinfo = String.valueOf(this.enterpriseinfo);
          if (this.lnginfo != null)
            bean.lnginfo = String.valueOf(this.lnginfo);
          if (this.latinfo != null)
            bean.latinfo = String.valueOf(this.latinfo);
          if (this.activedate != null)
            bean.activedate = (Date) this.activedate.clone();
          if (this.closedate != null)
            bean.closedate = (Date) this.closedate.clone();
          if (this.status != null)
            bean.status = String.valueOf(this.status);
          if (this.createtime != null)
            bean.createtime = (Timestamp) this.createtime.clone();
          if (this.updatetime != null)
            bean.updatetime = (Timestamp) this.updatetime.clone();
  
        return bean;*/
    }


   /* Returns a string representation of the object. */
    public String toString()
    {
        String sep = "; ";
        StringBuffer sb = new StringBuffer();
        sb.append("UsionBerthDto").append(sep);
        sb.append("[id]").append(" = ").append(id).append(sep);
        sb.append("[berthcode]").append(" = ").append(berthcode).append(sep);
        sb.append("[provincecode]").append(" = ").append(provincecode).append(sep);
        sb.append("[citycode]").append(" = ").append(citycode).append(sep);
        sb.append("[zonecode]").append(" = ").append(zonecode).append(sep);
        sb.append("[areaname]").append(" = ").append(areaname).append(sep);
        sb.append("[businessareaname]").append(" = ").append(businessareaname).append(sep);
        sb.append("[parkname]").append(" = ").append(parkname).append(sep);
        sb.append("[inuseflag]").append(" = ").append(inuseflag).append(sep);
        sb.append("[berthtype]").append(" = ").append(berthtype).append(sep);
        sb.append("[enterpriseinfo]").append(" = ").append(enterpriseinfo).append(sep);
        sb.append("[lnginfo]").append(" = ").append(lnginfo).append(sep);
        sb.append("[latinfo]").append(" = ").append(latinfo).append(sep);
        sb.append("[activedate]").append(" = ").append(activedate).append(sep);
        sb.append("[closedate]").append(" = ").append(closedate).append(sep);
        sb.append("[status]").append(" = ").append(status).append(sep);
        sb.append("[createtime]").append(" = ").append(createtime).append(sep);
        sb.append("[updatetime]").append(" = ").append(updatetime).append(sep);
            return sb.toString();
    }

  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid()
  {
  	StringBuffer sb = new StringBuffer() ;

    //check field ID
      if (this.getId()==null)
             sb.append("ID不能为空; ");
      if (this.getId()!=null)
             if (this.getId().getBytes().length > 35)
                sb.append("ID宽度不能超过 "+35+"个字符;  ");
    
    //check field BERTHCODE
      if (this.getBerthcode()!=null)
             if (this.getBerthcode().getBytes().length > 35)
                sb.append("BERTHCODE宽度不能超过 "+35+"个字符;  ");
    
    //check field PROVINCECODE
      if (this.getProvincecode()!=null)
             if (this.getProvincecode().getBytes().length > 32)
                sb.append("PROVINCECODE宽度不能超过 "+32+"个字符;  ");
    
    //check field CITYCODE
      if (this.getCitycode()!=null)
             if (this.getCitycode().getBytes().length > 32)
                sb.append("CITYCODE宽度不能超过 "+32+"个字符;  ");
    
    //check field ZONECODE
      if (this.getZonecode()!=null)
             if (this.getZonecode().getBytes().length > 32)
                sb.append("ZONECODE宽度不能超过 "+32+"个字符;  ");
    
    //check field AREANAME
      if (this.getAreaname()!=null)
             if (this.getAreaname().getBytes().length > 128)
                sb.append("AREANAME宽度不能超过 "+128+"个字符;  ");
    
    //check field BUSINESSAREANAME
      if (this.getBusinessareaname()!=null)
             if (this.getBusinessareaname().getBytes().length > 128)
                sb.append("BUSINESSAREANAME宽度不能超过 "+128+"个字符;  ");
    
    //check field PARKNAME
      if (this.getParkname()!=null)
             if (this.getParkname().getBytes().length > 128)
                sb.append("PARKNAME宽度不能超过 "+128+"个字符;  ");
    
    //check field INUSEFLAG
      if (this.getInuseflag()==null)
             sb.append("INUSEFLAG不能为空; ");
      if (this.getInuseflag()!=null)
             if (this.getInuseflag().getBytes().length > 1)
                sb.append("INUSEFLAG宽度不能超过 "+1+"个字符;  ");
    
    //check field BERTHTYPE
      if (this.getBerthtype()!=null)
             if (this.getBerthtype().getBytes().length > 4)
                sb.append("BERTHTYPE宽度不能超过 "+4+"个字符;  ");
    
    //check field ENTERPRISEINFO
      if (this.getEnterpriseinfo()!=null)
             if (this.getEnterpriseinfo().getBytes().length > 128)
                sb.append("ENTERPRISEINFO宽度不能超过 "+128+"个字符;  ");
    
    //check field LNGINFO
      if (this.getLnginfo()!=null)
             if (this.getLnginfo().getBytes().length > 32)
                sb.append("LNGINFO宽度不能超过 "+32+"个字符;  ");
    
    //check field LATINFO
      if (this.getLatinfo()!=null)
             if (this.getLatinfo().getBytes().length > 32)
                sb.append("LATINFO宽度不能超过 "+32+"个字符;  ");
    
    //check field ACTIVEDATE
      
    //check field CLOSEDATE
      
    //check field STATUS
      if (this.getStatus()!=null)
             if (this.getStatus().getBytes().length > 2)
                sb.append("STATUS宽度不能超过 "+2+"个字符;  ");
    
      //don't need check field CREATETIME,it is CreateTimeStamp column
  
    //don't need check field UPDATETIME,it is UpdateTimeStamp column
   

 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
   public String  checkValid(String[] _columnNames)
  {
  	StringBuffer sb = new StringBuffer() ;
    // check columnNames
    String checkNameMsg = checkColumnNamesValid(_columnNames);
    if (checkNameMsg != null) {
         return checkNameMsg;
    }
    //check field ID
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("ID")) {
               if (this.getId()==null)
                    sb.append("ID 不能为空;  ");
               if (this.getId()!=null)
                    if (this.getId().getBytes().length > 35)
                        sb.append("ID 宽度不能超过 "+35+"个字符; ");
             break;
         }
  }
    
    //check field BERTHCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("BERTHCODE")) {
                 if (this.getBerthcode()!=null)
                    if (this.getBerthcode().getBytes().length > 35)
                        sb.append("BERTHCODE 宽度不能超过 "+35+"个字符; ");
             break;
         }
  }
    
    //check field PROVINCECODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("PROVINCECODE")) {
                 if (this.getProvincecode()!=null)
                    if (this.getProvincecode().getBytes().length > 32)
                        sb.append("PROVINCECODE 宽度不能超过 "+32+"个字符; ");
             break;
         }
  }
    
    //check field CITYCODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("CITYCODE")) {
                 if (this.getCitycode()!=null)
                    if (this.getCitycode().getBytes().length > 32)
                        sb.append("CITYCODE 宽度不能超过 "+32+"个字符; ");
             break;
         }
  }
    
    //check field ZONECODE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("ZONECODE")) {
                 if (this.getZonecode()!=null)
                    if (this.getZonecode().getBytes().length > 32)
                        sb.append("ZONECODE 宽度不能超过 "+32+"个字符; ");
             break;
         }
  }
    
    //check field AREANAME
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("AREANAME")) {
                 if (this.getAreaname()!=null)
                    if (this.getAreaname().getBytes().length > 128)
                        sb.append("AREANAME 宽度不能超过 "+128+"个字符; ");
             break;
         }
  }
    
    //check field BUSINESSAREANAME
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("BUSINESSAREANAME")) {
                 if (this.getBusinessareaname()!=null)
                    if (this.getBusinessareaname().getBytes().length > 128)
                        sb.append("BUSINESSAREANAME 宽度不能超过 "+128+"个字符; ");
             break;
         }
  }
    
    //check field PARKNAME
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("PARKNAME")) {
                 if (this.getParkname()!=null)
                    if (this.getParkname().getBytes().length > 128)
                        sb.append("PARKNAME 宽度不能超过 "+128+"个字符; ");
             break;
         }
  }
    
    //check field INUSEFLAG
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("INUSEFLAG")) {
               if (this.getInuseflag()==null)
                    sb.append("INUSEFLAG 不能为空;  ");
               if (this.getInuseflag()!=null)
                    if (this.getInuseflag().getBytes().length > 1)
                        sb.append("INUSEFLAG 宽度不能超过 "+1+"个字符; ");
             break;
         }
  }
    
    //check field BERTHTYPE
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("BERTHTYPE")) {
                 if (this.getBerthtype()!=null)
                    if (this.getBerthtype().getBytes().length > 4)
                        sb.append("BERTHTYPE 宽度不能超过 "+4+"个字符; ");
             break;
         }
  }
    
    //check field ENTERPRISEINFO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("ENTERPRISEINFO")) {
                 if (this.getEnterpriseinfo()!=null)
                    if (this.getEnterpriseinfo().getBytes().length > 128)
                        sb.append("ENTERPRISEINFO 宽度不能超过 "+128+"个字符; ");
             break;
         }
  }
    
    //check field LNGINFO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("LNGINFO")) {
                 if (this.getLnginfo()!=null)
                    if (this.getLnginfo().getBytes().length > 32)
                        sb.append("LNGINFO 宽度不能超过 "+32+"个字符; ");
             break;
         }
  }
    
    //check field LATINFO
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("LATINFO")) {
                 if (this.getLatinfo()!=null)
                    if (this.getLatinfo().getBytes().length > 32)
                        sb.append("LATINFO 宽度不能超过 "+32+"个字符; ");
             break;
         }
  }
    
    //check field ACTIVEDATE
          
    //check field CLOSEDATE
          
    //check field STATUS
     for (int i = 0; i < _columnNames.length; i++) {
        if (((String) _columnNames[i]).equals("STATUS")) {
                 if (this.getStatus()!=null)
                    if (this.getStatus().getBytes().length > 2)
                        sb.append("STATUS 宽度不能超过 "+2+"个字符; ");
             break;
         }
  }
    
      //don't need check field CREATETIME,it is CreateTimeStamp column
  
    //don't need check field UPDATETIME,it is UpdateTimeStamp column
  
 	String msg = sb.toString() ;
	if (msg.length() == 0)
		  return null ;

  return  msg;
  }
  /* Returns value valid checking String , NULL is Valid*/
	public String checkValidExcept(String[] _columnNames) {
		String msg = checkColumnNamesValid(_columnNames);
		if (msg != null) {
			return msg;
		}
		String[] columnCheckNames = new String[columnNames().length
				- _columnNames.length];
		int k = 0;
		for (int i = 0; i < columnNames().length; i++) {
			boolean checkNameInColumn = true;
			for (int j = 0; j < _columnNames.length; j++) {
				if (_columnNames[i].equals(columnNames()[j])) {
					checkNameInColumn = false;
					break;
				}
			}
			if (checkNameInColumn) {
				columnCheckNames[k] = columnNames()[i];
				k++;
			}
		}
		return checkValid(columnCheckNames);
	}
	/* Returns value valid checking String , NULL is Valid */
	public String checkColumnNamesValid(String[] _columnNames) {
		StringBuffer sb = new StringBuffer();
		if (_columnNames.length > columnNames().length) {
			return "输入字段个数多于表中字段个数;  ";
		}
		// check columnNames
		for (int i = 0; i < _columnNames.length; i++) {
			boolean checkNameValid = false;
			for (int j = 0; j < columnNames().length; j++) {
				if (_columnNames[i] != null
						&& _columnNames[i].equals(columnNames()[j])) {
					checkNameValid = true;
					break;
				}
			}
			if (!checkNameValid)
				sb.append("输入字段  " + _columnNames[i] + "  不在该表字段中;  ");
		}
		String msg = sb.toString();
		if (msg.length() == 0)
			return null;

		return msg;
	}
/*******************************************************
*
*  implement IDto
*
*****************************************************/

  /* if this Dto has children Dtos*/
  public boolean  isParent() {
     return false;
  };

  /* get the children Dtos if this has children*/
  public IDto[]  getChildren() {
     return null;
  };

  /* set the children Dtos if this has children*/
  public void  setChildren(IDto[] _dtos) 
  {
     throw new RuntimeException("此dto没有相关联的子dto，不能进行此操作");
  };
  
  /* return the IPK class  */
    public IPK      getPK(){
      UsionBerthPK pk = new UsionBerthPK();
      pk.setId(getId());
      return pk;
    };
    
	/**
	 * 更改其是否被修改的属性，将其true更改为false
	 */
	public void clearChangedFlag() {
		changedValues.clear();
	}

	/**
	 * 获得被修改的列
	 * 
	 * @return
	 */
	public List getChangedFields() {
		List changedFields = new ArrayList();
		Set keySet = changedValues.keySet();
		for (Object object : keySet) {
			changedFields.add(object);
		}
		return changedFields;
	}

	/**
	 * 通过列名获得其某个列的被修改前的属性值，若其未被修改则返回null
	 * 
	 * @param fieldName
	 * @return
	 */
	public Object getOldValue(String fieldName) {
		if (changedValues.containsKey(fieldName))
			return changedValues.get(fieldName);
		return null;
	}

	/**
	 * 标记当前dto数值是否被修改过
	 * 
	 * @return
	 */
	public boolean isChanged() {
		return !changedValues.isEmpty();
	}

	/**
	 * 将dto新修改的值恢复成原始值
	 */
	public void restoreChangedValule() {
		Set keySet = changedValues.keySet();
		for (Object object : keySet) {
			String key = (String) object;
			Object value = changedValues.get(key);
			if (columnId().equals(key)) {
				setId((String)value);
			}
			else if (columnBerthcode().equals(key)) {
				setBerthcode((String)value);
			}
			else if (columnProvincecode().equals(key)) {
				setProvincecode((String)value);
			}
			else if (columnCitycode().equals(key)) {
				setCitycode((String)value);
			}
			else if (columnZonecode().equals(key)) {
				setZonecode((String)value);
			}
			else if (columnAreaname().equals(key)) {
				setAreaname((String)value);
			}
			else if (columnBusinessareaname().equals(key)) {
				setBusinessareaname((String)value);
			}
			else if (columnParkname().equals(key)) {
				setParkname((String)value);
			}
			else if (columnInuseflag().equals(key)) {
				setInuseflag((String)value);
			}
			else if (columnBerthtype().equals(key)) {
				setBerthtype((String)value);
			}
			else if (columnEnterpriseinfo().equals(key)) {
				setEnterpriseinfo((String)value);
			}
			else if (columnLnginfo().equals(key)) {
				setLnginfo((String)value);
			}
			else if (columnLatinfo().equals(key)) {
				setLatinfo((String)value);
			}
			else if (columnActivedate().equals(key)) {
				setActivedate((Date)value);
			}
			else if (columnClosedate().equals(key)) {
				setClosedate((Date)value);
			}
			else if (columnStatus().equals(key)) {
				setStatus((String)value);
			}
			else if (columnCreatetime().equals(key)) {
				setCreatetime((Timestamp)value);
			}
			else if (columnUpdatetime().equals(key)) {
				setUpdatetime((Timestamp)value);
			}
		}
		changedValues.clear();
	}
	
/**
*pk auto gennerator
*/	
	public void doAutoGenPk(YakIPkGen pkgen) {
	if(this.id==null||"".equals(this.id))
    {
      this.id=(String)pkgen.getGenValue("usion_berth","ID",this);
    }
	}
/**
*map值  set到DTO
*/

	public void doMapToColumnValue(Map map)   {

		if(PersistenceGlobalProperties.getGlobalMapToDtoStrategy()==PersistenceGlobalProperties.MAPDTOSTRATEGY_NULL_VALID)
		{
			/*允许处理map中value为NULL的元素*/
			doMapToColumnValueNullValid(map);
		}else
		{   
			/*不处理map中value为NULL的元素*/
			doMapToColumnValueNullNoValid(map);
		}
	}
	
	/**
	*map值  set到DTO 处理NULL值
	*/

		public void doMapToColumnValueNullValid(Map map)  {
			    if(map.containsKey("id"))
		    {
			        if(null==map.get("id"))
		        {
		        	this.id=null;
		        }else
		        {
		        	this.id=(String)map.get("id");
		        }
		        
			    }
			    if(map.containsKey("berthcode"))
		    {
			        if(null==map.get("berthcode"))
		        {
		        	this.berthcode=null;
		        }else
		        {
		        	this.berthcode=(String)map.get("berthcode");
		        }
		        
			    }
			    if(map.containsKey("provincecode"))
		    {
			        if(null==map.get("provincecode"))
		        {
		        	this.provincecode=null;
		        }else
		        {
		        	this.provincecode=(String)map.get("provincecode");
		        }
		        
			    }
			    if(map.containsKey("citycode"))
		    {
			        if(null==map.get("citycode"))
		        {
		        	this.citycode=null;
		        }else
		        {
		        	this.citycode=(String)map.get("citycode");
		        }
		        
			    }
			    if(map.containsKey("zonecode"))
		    {
			        if(null==map.get("zonecode"))
		        {
		        	this.zonecode=null;
		        }else
		        {
		        	this.zonecode=(String)map.get("zonecode");
		        }
		        
			    }
			    if(map.containsKey("areaname"))
		    {
			        if(null==map.get("areaname"))
		        {
		        	this.areaname=null;
		        }else
		        {
		        	this.areaname=(String)map.get("areaname");
		        }
		        
			    }
			    if(map.containsKey("businessareaname"))
		    {
			        if(null==map.get("businessareaname"))
		        {
		        	this.businessareaname=null;
		        }else
		        {
		        	this.businessareaname=(String)map.get("businessareaname");
		        }
		        
			    }
			    if(map.containsKey("parkname"))
		    {
			        if(null==map.get("parkname"))
		        {
		        	this.parkname=null;
		        }else
		        {
		        	this.parkname=(String)map.get("parkname");
		        }
		        
			    }
			    if(map.containsKey("inuseflag"))
		    {
			        if(null==map.get("inuseflag"))
		        {
		        	this.inuseflag=null;
		        }else
		        {
		        	this.inuseflag=(String)map.get("inuseflag");
		        }
		        
			    }
			    if(map.containsKey("berthtype"))
		    {
			        if(null==map.get("berthtype"))
		        {
		        	this.berthtype=null;
		        }else
		        {
		        	this.berthtype=(String)map.get("berthtype");
		        }
		        
			    }
			    if(map.containsKey("enterpriseinfo"))
		    {
			        if(null==map.get("enterpriseinfo"))
		        {
		        	this.enterpriseinfo=null;
		        }else
		        {
		        	this.enterpriseinfo=(String)map.get("enterpriseinfo");
		        }
		        
			    }
			    if(map.containsKey("lnginfo"))
		    {
			        if(null==map.get("lnginfo"))
		        {
		        	this.lnginfo=null;
		        }else
		        {
		        	this.lnginfo=(String)map.get("lnginfo");
		        }
		        
			    }
			    if(map.containsKey("latinfo"))
		    {
			        if(null==map.get("latinfo"))
		        {
		        	this.latinfo=null;
		        }else
		        {
		        	this.latinfo=(String)map.get("latinfo");
		        }
		        
			    }
			    if(map.containsKey("activedate"))
		    {
			        if(map.get("activedate") instanceof java.util.Date)
		        {
		           this.activedate=new Date(((java.util.Date)map.get("activedate")).getTime());
		        }else if(map.get("activedate") instanceof String)
		        {
		             try {
		                if(!"".equals(map.get("activedate")))
		                {
						  this.activedate=new Date(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("activedate").toString().trim()).getTime());
					    }else
					    {
					      this.activedate=null;
					    }
				    } catch (Exception e) {
						throw new RuntimeException(e.getMessage());
					}
		        }else if(map.get("activedate") instanceof java.sql.Date)
		        {
		           this.activedate=(Date)map.get("activedate");
		        }else
		        {
		        	this.activedate=null;
		        }
			    }
			    if(map.containsKey("closedate"))
		    {
			        if(map.get("closedate") instanceof java.util.Date)
		        {
		           this.closedate=new Date(((java.util.Date)map.get("closedate")).getTime());
		        }else if(map.get("closedate") instanceof String)
		        {
		             try {
		                if(!"".equals(map.get("closedate")))
		                {
						  this.closedate=new Date(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("closedate").toString().trim()).getTime());
					    }else
					    {
					      this.closedate=null;
					    }
				    } catch (Exception e) {
						throw new RuntimeException(e.getMessage());
					}
		        }else if(map.get("closedate") instanceof java.sql.Date)
		        {
		           this.closedate=(Date)map.get("closedate");
		        }else
		        {
		        	this.closedate=null;
		        }
			    }
			    if(map.containsKey("status"))
		    {
			        if(null==map.get("status"))
		        {
		        	this.status=null;
		        }else
		        {
		        	this.status=(String)map.get("status");
		        }
		        
			    }
			    if(map.containsKey("createtime"))
		    {
			        if(map.get("createtime") instanceof java.sql.Timestamp)
		        {
		           this.createtime=(Timestamp)map.get("createtime");
		        }else if(map.get("createtime") instanceof java.sql.Date)
		        {
		           this.createtime=new Timestamp(((java.sql.Date)map.get("createtime")).getTime());
		        }else if(map.get("createtime") instanceof java.util.Date)
		        {
		           this.createtime=new Timestamp(((java.util.Date)map.get("createtime")).getTime());
		        }else if(map.get("createtime") instanceof String)
		        {
		        	try {
		                if(!"".equals(map.get("createtime")))
		                {
						  this.createtime=new Timestamp(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("createtime").toString().trim()).getTime());
					    }else
					    {
					      this.createtime=null;
					    }
					} catch (Exception e) {
						throw new RuntimeException(e.getMessage());
					}
		        }else 
		        {
		        	this.createtime=null;
		        }
			    }
			    if(map.containsKey("updatetime"))
		    {
			        if(map.get("updatetime") instanceof java.sql.Timestamp)
		        {
		           this.updatetime=(Timestamp)map.get("updatetime");
		        }else if(map.get("updatetime") instanceof java.sql.Date)
		        {
		           this.updatetime=new Timestamp(((java.sql.Date)map.get("updatetime")).getTime());
		        }else if(map.get("updatetime") instanceof java.util.Date)
		        {
		           this.updatetime=new Timestamp(((java.util.Date)map.get("updatetime")).getTime());
		        }else if(map.get("updatetime") instanceof String)
		        {
		        	try {
		                if(!"".equals(map.get("updatetime")))
		                {
						  this.updatetime=new Timestamp(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("updatetime").toString().trim()).getTime());
					    }else
					    {
					      this.updatetime=null;
					    }
					} catch (Exception e) {
						throw new RuntimeException(e.getMessage());
					}
		        }else 
		        {
		        	this.updatetime=null;
		        }
			    }
			}
		/**
		*map值  set到DTO  不处理NULL值
		*/

			public void doMapToColumnValueNullNoValid(Map map) {
					    if(null!=map.get("id"))
			    {
					        this.id=(String)map.get("id");
					    }
					    if(null!=map.get("berthcode"))
			    {
					        this.berthcode=(String)map.get("berthcode");
					    }
					    if(null!=map.get("provincecode"))
			    {
					        this.provincecode=(String)map.get("provincecode");
					    }
					    if(null!=map.get("citycode"))
			    {
					        this.citycode=(String)map.get("citycode");
					    }
					    if(null!=map.get("zonecode"))
			    {
					        this.zonecode=(String)map.get("zonecode");
					    }
					    if(null!=map.get("areaname"))
			    {
					        this.areaname=(String)map.get("areaname");
					    }
					    if(null!=map.get("businessareaname"))
			    {
					        this.businessareaname=(String)map.get("businessareaname");
					    }
					    if(null!=map.get("parkname"))
			    {
					        this.parkname=(String)map.get("parkname");
					    }
					    if(null!=map.get("inuseflag"))
			    {
					        this.inuseflag=(String)map.get("inuseflag");
					    }
					    if(null!=map.get("berthtype"))
			    {
					        this.berthtype=(String)map.get("berthtype");
					    }
					    if(null!=map.get("enterpriseinfo"))
			    {
					        this.enterpriseinfo=(String)map.get("enterpriseinfo");
					    }
					    if(null!=map.get("lnginfo"))
			    {
					        this.lnginfo=(String)map.get("lnginfo");
					    }
					    if(null!=map.get("latinfo"))
			    {
					        this.latinfo=(String)map.get("latinfo");
					    }
					    if(null!=map.get("activedate"))
			    {
					        if(map.get("activedate") instanceof java.util.Date)
			        {
			           this.activedate=new Date(((java.util.Date)map.get("activedate")).getTime());
			        }else if(map.get("activedate") instanceof String)
			        {
			        	try{
			                if(!"".equals(map.get("activedate")))
			                {
							  this.activedate=new Date(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("activedate").toString().trim()).getTime());
						    }else
						    {
						      this.activedate=null;
						    }
					    } catch (Exception e) {
							throw new RuntimeException(e.getMessage());
						}
			        }else
			        {
			           this.activedate=(Date)map.get("activedate");
			        }
									    }
					    if(null!=map.get("closedate"))
			    {
					        if(map.get("closedate") instanceof java.util.Date)
			        {
			           this.closedate=new Date(((java.util.Date)map.get("closedate")).getTime());
			        }else if(map.get("closedate") instanceof String)
			        {
			        	try{
			                if(!"".equals(map.get("closedate")))
			                {
							  this.closedate=new Date(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("closedate").toString().trim()).getTime());
						    }else
						    {
						      this.closedate=null;
						    }
					    } catch (Exception e) {
							throw new RuntimeException(e.getMessage());
						}
			        }else
			        {
			           this.closedate=(Date)map.get("closedate");
			        }
									    }
					    if(null!=map.get("status"))
			    {
					        this.status=(String)map.get("status");
					    }
					    if(null!=map.get("createtime"))
			    {
					        if(map.get("createtime") instanceof java.sql.Timestamp)
		        	{
		           		this.createtime=(Timestamp)map.get("createtime");
		        	}else if(map.get("createtime") instanceof java.sql.Date)
		        	{
		           		this.createtime=new Timestamp(((java.sql.Date)map.get("createtime")).getTime());
		        	}else if(map.get("createtime") instanceof java.util.Date)
		        	{
		           		this.createtime=new Timestamp(((java.util.Date)map.get("createtime")).getTime());
		        	}else if(map.get("createtime") instanceof String)
			        {
			        	try{
			                if(!"".equals(map.get("createtime")))
			                {
							  this.createtime=new Timestamp(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("createtime").toString().trim()).getTime());
						    }else
						    {
						      this.createtime=null;
						    }
					    } catch (Exception e) {
							throw new RuntimeException(e.getMessage());
						}
			        }else
			        {
			           this.createtime=(Timestamp)map.get("createtime");
			        }
					    }
					    if(null!=map.get("updatetime"))
			    {
					        if(map.get("updatetime") instanceof java.sql.Timestamp)
		        	{
		           		this.updatetime=(Timestamp)map.get("updatetime");
		        	}else if(map.get("updatetime") instanceof java.sql.Date)
		        	{
		           		this.updatetime=new Timestamp(((java.sql.Date)map.get("updatetime")).getTime());
		        	}else if(map.get("updatetime") instanceof java.util.Date)
		        	{
		           		this.updatetime=new Timestamp(((java.util.Date)map.get("updatetime")).getTime());
		        	}else if(map.get("updatetime") instanceof String)
			        {
			        	try{
			                if(!"".equals(map.get("updatetime")))
			                {
							  this.updatetime=new Timestamp(new SimpleDateFormat("yyyy-MM-dd", Locale.CHINESE).parse(map.get("updatetime").toString().trim()).getTime());
						    }else
						    {
						      this.updatetime=null;
						    }
					    } catch (Exception e) {
							throw new RuntimeException(e.getMessage());
						}
			        }else
			        {
			           this.updatetime=(Timestamp)map.get("updatetime");
			        }
					    }
					}
	
	
/**
*map值  set到dto pk属性
*/
	public void doMapToPk(Map map) {
		

	    if(null!=map.get("id"))
	    {
	      this.id=(String)map.get("id");
	    }
		
		
	}
/**
*dto 属性值put到map
*/
	public Map getColumnValueToMap() {
		Map map=new HashMap();
    	map.put("id",this.id);
    	map.put("berthcode",this.berthcode);
    	map.put("provincecode",this.provincecode);
    	map.put("citycode",this.citycode);
    	map.put("zonecode",this.zonecode);
    	map.put("areaname",this.areaname);
    	map.put("businessareaname",this.businessareaname);
    	map.put("parkname",this.parkname);
    	map.put("inuseflag",this.inuseflag);
    	map.put("berthtype",this.berthtype);
    	map.put("enterpriseinfo",this.enterpriseinfo);
    	map.put("lnginfo",this.lnginfo);
    	map.put("latinfo",this.latinfo);
    	map.put("activedate",this.activedate);
    	map.put("closedate",this.closedate);
    	map.put("status",this.status);
    	map.put("createtime",this.createtime);
    	map.put("updatetime",this.updatetime);
		return map;
		
	}
/**
*pk 属性值put到map
*/
	public Map getPkToMap() {
		Map map=new HashMap();
    	map.put("id",this.id);
		return map;
	}
	
	 /**
    *  Columns
    */
	public Map getColumnNames() {
		Map map=new HashMap();
    	map.put("ID","String");
    	map.put("BERTHCODE","String");
    	map.put("PROVINCECODE","String");
    	map.put("CITYCODE","String");
    	map.put("ZONECODE","String");
    	map.put("AREANAME","String");
    	map.put("BUSINESSAREANAME","String");
    	map.put("PARKNAME","String");
    	map.put("INUSEFLAG","String");
    	map.put("BERTHTYPE","String");
    	map.put("ENTERPRISEINFO","String");
    	map.put("LNGINFO","String");
    	map.put("LATINFO","String");
    	map.put("ACTIVEDATE","Date");
    	map.put("CLOSEDATE","Date");
    	map.put("STATUS","String");
    	map.put("CREATETIME","Timestamp");
    	map.put("UPDATETIME","Timestamp");
		return map;
		
	}
	 /**
    *  Table Name
    */
    public  String getTableName(){
        return "usion_berth";
    }
    /**
     * Encrypt Columns
     */
    public String[] getEncryptColumnNames(){
    	String[] columnNames = new String[0];
        return columnNames;
    }
    
}
