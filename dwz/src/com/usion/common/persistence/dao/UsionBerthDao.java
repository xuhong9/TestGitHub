    



package com.usion.common.persistence.dao;

import java.io.Reader;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.cfcc.jaf.persistence.dao.exception.ZeroRowsUpdatedException;
import com.cfcc.jaf.persistence.jaform.parent.IDto;
import com.cfcc.jaf.persistence.jaform.parent.IPK;
import com.usion.common.persistence.dto.UsionBerthDto ;
import com.usion.common.persistence.pk.UsionBerthPK ;

import codegen.parent.DbHelper;
import codegen.parent.YakIDao;


/**
 * <p>Title: DAO of table: usion_berth</p>
 * <p>Description: Data Access Object  </p>
 * <p>Copyright: Copyright (c) 2015</p>
 * <p>Company: USION </p>
 * <p>Generation Time: 2015-10-28 12:37:48 </p>
 *  Do NOT change this file by hand.
 *  This java source file is generated by JAF_ORM .
 *  dao.vm timestamp: 2015-10-28 08:30:00
 ******************************************************
 * <p> <b>change record</b><br>
 *  make dao methods simply.<br>
 *  especially make update,delete methods simply.<br>
 *  remove "..withCheck" method,withCheck will impl in JAFOrmTemplate.<br>
 *  remove "delete(IDto _dto,..)" method.<br></p>
 * @author Administrator
 */

public class UsionBerthDao  implements YakIDao
{


    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO usion_berth ("
          + "ID,BERTHCODE,PROVINCECODE,CITYCODE,ZONECODE"
          + ",AREANAME,BUSINESSAREANAME,PARKNAME,INUSEFLAG,BERTHTYPE"
          + ",ENTERPRISEINFO,LNGINFO,LATINFO,ACTIVEDATE,CLOSEDATE"
          + ",STATUS,CREATETIME,UPDATETIME"
        + ") VALUES ("
        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"+DbHelper.getTimestampType()+","+DbHelper.getTimestampType()+" )";


    private static final String SQL_INSERT_WITH_RESULT = "SELECT * FROM FINAL TABLE( " + SQL_INSERT + " )";
    
    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "usion_berth.ID, usion_berth.BERTHCODE, usion_berth.PROVINCECODE, usion_berth.CITYCODE, usion_berth.ZONECODE, "
        + "usion_berth.AREANAME, usion_berth.BUSINESSAREANAME, usion_berth.PARKNAME, usion_berth.INUSEFLAG, usion_berth.BERTHTYPE, "
        + "usion_berth.ENTERPRISEINFO, usion_berth.LNGINFO, usion_berth.LATINFO, usion_berth.ACTIVEDATE, usion_berth.CLOSEDATE, "
        + "usion_berth.STATUS, usion_berth.CREATETIME, usion_berth.UPDATETIME "
        + "FROM usion_berth "
        +" WHERE " 
        + "ID = ?"
        ;
    /* SQL to select for update data */
    private static final String SQL_SELECT_FOR_UPDATE =
        "SELECT "
        + "usion_berth.ID, usion_berth.BERTHCODE, usion_berth.PROVINCECODE, usion_berth.CITYCODE, usion_berth.ZONECODE, "
        + "usion_berth.AREANAME, usion_berth.BUSINESSAREANAME, usion_berth.PARKNAME, usion_berth.INUSEFLAG, usion_berth.BERTHTYPE, "
        + "usion_berth.ENTERPRISEINFO, usion_berth.LNGINFO, usion_berth.LATINFO, usion_berth.ACTIVEDATE, usion_berth.CLOSEDATE, "
        + "usion_berth.STATUS, usion_berth.CREATETIME, usion_berth.UPDATETIME "
        + "FROM usion_berth "
        +" WHERE " 
        + "ID = ? FOR UPDATE "
        ;

      /* SQL to select data (SCROLLABLE)*/
     private static final String SQL_SELECT_BATCH_SCROLLABLE =
        "SELECT "
        + "  usion_berth.ID  , usion_berth.BERTHCODE  , usion_berth.PROVINCECODE  , usion_berth.CITYCODE  , usion_berth.ZONECODE "
        + " , usion_berth.AREANAME  , usion_berth.BUSINESSAREANAME  , usion_berth.PARKNAME  , usion_berth.INUSEFLAG  , usion_berth.BERTHTYPE "
        + " , usion_berth.ENTERPRISEINFO  , usion_berth.LNGINFO  , usion_berth.LATINFO  , usion_berth.ACTIVEDATE  , usion_berth.CLOSEDATE "
        + " , usion_berth.STATUS  , usion_berth.CREATETIME  , usion_berth.UPDATETIME "
        + "FROM usion_berth ";



    /* SQL to select batch data */
    private static final String SQL_SELECT_BATCH =
        "SELECT "
        + "usion_berth.ID, usion_berth.BERTHCODE, usion_berth.PROVINCECODE, usion_berth.CITYCODE, usion_berth.ZONECODE, "
        + "usion_berth.AREANAME, usion_berth.BUSINESSAREANAME, usion_berth.PARKNAME, usion_berth.INUSEFLAG, usion_berth.BERTHTYPE, "
        + "usion_berth.ENTERPRISEINFO, usion_berth.LNGINFO, usion_berth.LATINFO, usion_berth.ACTIVEDATE, usion_berth.CLOSEDATE, "
        + "usion_berth.STATUS, usion_berth.CREATETIME, usion_berth.UPDATETIME "
        + "FROM usion_berth " ;
        

   /* SQL to select batch data where condition  */
    private static final String SQL_SELECT_BATCH_WHERE =" ( "
        + "ID = ?)"
        ;


    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE usion_berth SET "
        + "BERTHCODE =?,PROVINCECODE =?,CITYCODE =?,ZONECODE =?,AREANAME =?, "
        + "BUSINESSAREANAME =?,PARKNAME =?,INUSEFLAG =?,BERTHTYPE =?,ENTERPRISEINFO =?, "
        + "LNGINFO =?,LATINFO =?,ACTIVEDATE =?,CLOSEDATE =?,STATUS =?, "
        + "CREATETIME =CREATETIME,UPDATETIME ="+DbHelper.getTimestampType()+" "
        + "WHERE "
        + "ID = ?"
        ;

	/* SQL to update data, support LOB */
    private static final String SQL_UPDATE_LOB =
        "UPDATE usion_berth SET  "
        + "BERTHCODE =?, PROVINCECODE =?, CITYCODE =?, ZONECODE =?, AREANAME =?,  "
        + "BUSINESSAREANAME =?, PARKNAME =?, INUSEFLAG =?, BERTHTYPE =?, ENTERPRISEINFO =?,  "
        + "LNGINFO =?, LATINFO =?, ACTIVEDATE =?, CLOSEDATE =?, STATUS =?,  "
        + "CREATETIME =CREATETIME, UPDATETIME ="+DbHelper.getTimestampType()+" "
        + "WHERE "
        + "ID = ?"
        ;	
	
    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM usion_berth " 
        + " WHERE "
        + "ID = ?"
        ;


	/**
	*  批量查询 一次最多查询的参数数量
	*/
	
	public static final int FIND_BATCH_SIZE = 150  / 1;
	



   /**
   * Create a new record in Database.
   */
  public void create(IDto _dto,  Connection conn) throws SQLException
  {
     UsionBerthDto dto = (UsionBerthDto)_dto ;
     String msgValid = dto.checkValid() ;
     if (msgValid != null)
     	throw new SQLException("插入错误，"+msgValid) ;

     PreparedStatement ps = null;
     try
     {
         ps = conn.prepareStatement(SQL_INSERT);
          ps.setString(1, dto.getId());

          ps.setString(2, dto.getBerthcode());

          ps.setString(3, dto.getProvincecode());

          ps.setString(4, dto.getCitycode());

          ps.setString(5, dto.getZonecode());

          ps.setString(6, dto.getAreaname());

          ps.setString(7, dto.getBusinessareaname());

          ps.setString(8, dto.getParkname());

          ps.setString(9, dto.getInuseflag());

          ps.setString(10, dto.getBerthtype());

          ps.setString(11, dto.getEnterpriseinfo());

          ps.setString(12, dto.getLnginfo());

          ps.setString(13, dto.getLatinfo());

          ps.setDate(14, dto.getActivedate());

          ps.setDate(15, dto.getClosedate());

          ps.setString(16, dto.getStatus());

           ps.executeUpdate();
     }
     finally
     {
         close(ps);
     }
     return  ;
  }

   /**
   * Create a new record in Database. and return result, only used when having generated key
   */
   public IDto createWithResult(IDto _dto,  Connection conn) throws SQLException
   {
       UsionBerthDto dto = (UsionBerthDto)_dto ;
       String msgValid = dto.checkValid() ;
       if (msgValid != null)
           throw new SQLException("插入错误，"+msgValid) ;

       PreparedStatement ps = null;
       ResultSet rs = null;
       try
       {
           ps = conn.prepareStatement(SQL_INSERT_WITH_RESULT);
            ps.setString(1, dto.getId());
            ps.setString(2, dto.getBerthcode());
            ps.setString(3, dto.getProvincecode());
            ps.setString(4, dto.getCitycode());
            ps.setString(5, dto.getZonecode());
            ps.setString(6, dto.getAreaname());
            ps.setString(7, dto.getBusinessareaname());
            ps.setString(8, dto.getParkname());
            ps.setString(9, dto.getInuseflag());
            ps.setString(10, dto.getBerthtype());
            ps.setString(11, dto.getEnterpriseinfo());
            ps.setString(12, dto.getLnginfo());
            ps.setString(13, dto.getLatinfo());
            ps.setDate(14, dto.getActivedate());
            ps.setDate(15, dto.getClosedate());
            ps.setString(16, dto.getStatus());
             rs = ps.executeQuery();
           List results = getResults(rs);
           if (results!=null && results.size() > 0){
        	   IDto tempDto = (IDto)results.get(0);
        	   tempDto.clearChangedFlag();
        	   return tempDto;
           }
           return null;
        }
        finally
        {
           close(ps);
           close(rs);
        }
   }

 	/**
	* Create batch new record in Database. it only create the first layer dto
	*/
    public void create(IDto[] _dtos, Connection conn)    throws SQLException
    {
        UsionBerthDto dto  ;
     	for (int i= 0; i< _dtos.length ; i++)
 	    {
 		    dto  = (UsionBerthDto)_dtos[i] ; 
    	    String msgValid = dto.checkValid() ;
        	if (msgValid != null)
     	    	throw new SQLException("插入错误，"+msgValid) ;
     	}
 	    PreparedStatement ps = null;
        try
        {
            ps = conn.prepareStatement(SQL_INSERT);
       
     	    for (int i= 0; i< _dtos.length ; i++)
     	    {
 	    	    dto  = (UsionBerthDto)_dtos[i] ; 
  
               ps.setString(1, dto.getId());
  
               ps.setString(2, dto.getBerthcode());
  
               ps.setString(3, dto.getProvincecode());
  
               ps.setString(4, dto.getCitycode());
  
               ps.setString(5, dto.getZonecode());
  
               ps.setString(6, dto.getAreaname());
  
               ps.setString(7, dto.getBusinessareaname());
  
               ps.setString(8, dto.getParkname());
  
               ps.setString(9, dto.getInuseflag());
  
               ps.setString(10, dto.getBerthtype());
  
               ps.setString(11, dto.getEnterpriseinfo());
  
               ps.setString(12, dto.getLnginfo());
  
               ps.setString(13, dto.getLatinfo());
  
               ps.setDate(14, dto.getActivedate());
  
               ps.setDate(15, dto.getClosedate());
  
               ps.setString(16, dto.getStatus());
                 ps.addBatch(); 
           }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }
        return  ;
   }




/**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       return find(_pk,  conn,  isLobSupport,null);
    }

    public IDto findBackfill(IPK pk, Connection conn, boolean isLobSupport,
			IDto backfillBean) throws SQLException {
		// TODO Auto-generated method stub
    	return find(  pk,   conn,   isLobSupport, null, backfillBean); 
	}
 
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport,Class dtoclass ) throws SQLException
    {
    	return find(  _pk,   conn,   isLobSupport, dtoclass,null ); 
    }
    
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto find(IPK _pk, Connection conn, boolean isLobSupport,Class dtoclass,IDto backfillBean) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }
        	
       

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT);
		   UsionBerthPK pk = (UsionBerthPK)_pk ;
           ps.setString(1, pk.getId());
           rs = ps.executeQuery();
           if (backfillBean!=null){
        	  return getResults(rs,0,isLobSupport,backfillBean);
           }else{
           List results = getResults(rs,dtoclass,0,isLobSupport);
           if (results!=null && results.size() > 0){
        	   IDto tempDto = (IDto)results.get(0);
        	   tempDto.clearChangedFlag();
        	   return tempDto;
           }
           } 
           return null;
        }finally {
           close(rs);
           close(ps);
        }
    }

     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto findForUpdate(IPK _pk, Connection conn, boolean isLobSupport) throws SQLException
    {
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return null ;
        //	throw new SQLException("查找错误，"+msgValid) ;
       }

       PreparedStatement ps = null;
       ResultSet rs = null;
       try {
           ps = conn.prepareStatement(SQL_SELECT_FOR_UPDATE);
		   UsionBerthPK pk = (UsionBerthPK)_pk ;
           ps.setString(1, pk.getId());

           rs = ps.executeQuery();
           List results = getResults(rs,0,isLobSupport);
           if (results!=null && results.size() > 0){
        	   IDto tempDto = (IDto)results.get(0);
        	   tempDto.clearChangedFlag();
        	   return tempDto;
           }
           return null;
        }finally {
           close(rs);
           close(ps);
        }
    }
  
  /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport) throws SQLException
    {
       return find(_pks, conn, isLobSupport,null);
    }
     /**
     * Retrive a record from Database.
     * (the statement below is somewhat redundant, but doesnot matter)
     */
    public IDto[] find(IPK[] _pks, Connection conn, boolean isLobSupport,Class dtoclass) throws SQLException
    {
        UsionBerthPK pk ;
        
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (UsionBerthPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 
        PreparedStatement ps = null;
        ResultSet rs = null;
        
         
        List results = new ArrayList();  
		for (int iBegin = 0; iBegin < pks.size(); iBegin += FIND_BATCH_SIZE)   //
		{
        
            try {
          		int iFindBatchSize = pks.size() - iBegin ;
	    		if (iFindBatchSize >FIND_BATCH_SIZE )
		    		iFindBatchSize = FIND_BATCH_SIZE ;
		  
        	    StringBuffer sb = new StringBuffer() ;
            	sb.append(SQL_SELECT_BATCH).append(" WHERE ").append(SQL_SELECT_BATCH_WHERE);

	    		for (int i = iBegin+1; i < iBegin + iFindBatchSize; i++)
		    	{
			    	sb.append("OR").append(SQL_SELECT_BATCH_WHERE) ;
    			}
        	
                ps = conn.prepareStatement(sb.toString());

                for (int i = iBegin;i < iBegin + iFindBatchSize; i++)
                {
                    pk  = (UsionBerthPK)(pks.get(i)) ; 
                   ps.setString((i-iBegin)*1+1, pk.getId());

			
	            }
                rs = ps.executeQuery();
                results.addAll(getResults(rs,dtoclass,0,isLobSupport)); 
            }finally {
                close(rs);
                close(ps);
            }
        }
        if (results.size() > 0)
        {
        	for(int i=0;i<results.size();i++){
        		IDto tempDto = (IDto) results.get(i);
        		tempDto.clearChangedFlag();
        	}
            UsionBerthDto[] dtos=new UsionBerthDto[0];
		    return (UsionBerthDto[]) results.toArray(dtos) ;
		   
        }
        return null;
    }

  
  
  



    /**
	    * 得到查询语句
	    */
    public String getSelectSQL() 
    {
	        return SQL_SELECT_BATCH_SCROLLABLE ;
    }
   

	public List getResults(ResultSet rs) throws SQLException
    {
    	return getResults(rs, 0) ;
    }
  

    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, int maxSize) throws SQLException
    {
		return getResults(rs,maxSize,false);
	}
	
	
	
	 public List getResults(ResultSet rs, int maxSize, boolean isLobSupport) throws SQLException
    {
        
        return getResults(rs,null,maxSize,isLobSupport);
    }
	
	
	 public List getResults(ResultSet rs, Class dtoclass, int maxSize,
				boolean isLobSupport ) throws SQLException {
			// TODO Auto-generated method stub
			return getResults(  rs,   dtoclass,   maxSize,
					  isLobSupport ,null);
		}

		public IDto getResults(ResultSet rs, int maxSize, boolean isLobSupport,
				IDto backfillBean) throws SQLException {
			// TODO Auto-generated method stub
			  List list= getResults(  rs,   null,   maxSize,
					  isLobSupport ,backfillBean);
			  if (list!=null && list.size()>0){
				  return (IDto) list.get(0);
			  }else{
				  return null;
			  }
		}
	
    /**
     * Populate the ResultSet.
     */
    public List getResults(ResultSet rs, Class dtoclass,int maxSize, boolean isLobSupport, IDto backfillBean) throws SQLException
    {
        List results = new ArrayList();
        String str ;
        Reader reader;
        Clob clob;
        char[] chars ;
        
        while (rs.next())
         {
             UsionBerthDto  dto = null;
              if((dtoclass==null) && (backfillBean==null))
             {
                dto = new  UsionBerthDto ();
             }else if(backfillBean!=null)
             {
                try {
                	 dto=(UsionBerthDto) ((UsionBerthDto) backfillBean).clone();
 				} catch (CloneNotSupportedException e) {
 					// TODO Auto-generated catch block
 					throw new SQLException();
 				}
             }else
             {
                try
                {
                  dto=(UsionBerthDto) dtoclass.newInstance();
                }catch(Throwable e)
                {
                  throw new SQLException(dtoclass+"初始化异常");
                }
             }
             //ID
             str = rs.getString("ID");
             if (str == null)
                dto.setId(null);
             else
                dto.setId(str.trim());

             //BERTHCODE
             str = rs.getString("BERTHCODE");
             if (str == null)
                dto.setBerthcode(null);
             else
                dto.setBerthcode(str.trim());

             //PROVINCECODE
             str = rs.getString("PROVINCECODE");
             if (str == null)
                dto.setProvincecode(null);
             else
                dto.setProvincecode(str.trim());

             //CITYCODE
             str = rs.getString("CITYCODE");
             if (str == null)
                dto.setCitycode(null);
             else
                dto.setCitycode(str.trim());

             //ZONECODE
             str = rs.getString("ZONECODE");
             if (str == null)
                dto.setZonecode(null);
             else
                dto.setZonecode(str.trim());

             //AREANAME
             str = rs.getString("AREANAME");
             if (str == null)
                dto.setAreaname(null);
             else
                dto.setAreaname(str.trim());

             //BUSINESSAREANAME
             str = rs.getString("BUSINESSAREANAME");
             if (str == null)
                dto.setBusinessareaname(null);
             else
                dto.setBusinessareaname(str.trim());

             //PARKNAME
             str = rs.getString("PARKNAME");
             if (str == null)
                dto.setParkname(null);
             else
                dto.setParkname(str.trim());

             //INUSEFLAG
             str = rs.getString("INUSEFLAG");
             if (str == null)
                dto.setInuseflag(null);
             else
                dto.setInuseflag(str.trim());

             //BERTHTYPE
             str = rs.getString("BERTHTYPE");
             if (str == null)
                dto.setBerthtype(null);
             else
                dto.setBerthtype(str.trim());

             //ENTERPRISEINFO
             str = rs.getString("ENTERPRISEINFO");
             if (str == null)
                dto.setEnterpriseinfo(null);
             else
                dto.setEnterpriseinfo(str.trim());

             //LNGINFO
             str = rs.getString("LNGINFO");
             if (str == null)
                dto.setLnginfo(null);
             else
                dto.setLnginfo(str.trim());

             //LATINFO
             str = rs.getString("LATINFO");
             if (str == null)
                dto.setLatinfo(null);
             else
                dto.setLatinfo(str.trim());

             //ACTIVEDATE
           dto.setActivedate(rs.getDate("ACTIVEDATE"));

             //CLOSEDATE
           dto.setClosedate(rs.getDate("CLOSEDATE"));

             //STATUS
             str = rs.getString("STATUS");
             if (str == null)
                dto.setStatus(null);
             else
                dto.setStatus(str.trim());

             //CREATETIME
           dto.setCreatetime(rs.getTimestamp("CREATETIME"));

             //UPDATETIME
           dto.setUpdatetime(rs.getTimestamp("UPDATETIME"));


			dto.clearChangedFlag();
            results.add(dto);
            
            if(maxSize >0  && results.size() == maxSize)
            {
            	break ;
            }
            
         }
        
		return results ;
    }

  /**
   * populate resultSet as cclass
   */
  protected IDto[] getChildrenResults(ResultSet rs ,Class _dto) throws SQLException{

      throw new SQLException("本dto没有与其它dto相关联，无法应用此方法");
  }


     /**
     * Update a record in Database.
     */

    public void update(IDto _dto, Connection conn, boolean isLobSupport) throws SQLException, ZeroRowsUpdatedException
    {
        String msgValid = _dto.checkValid() ;
        if (msgValid != null)
            throw new SQLException("修改错误，"+msgValid) ;
        UsionBerthDto dto = (UsionBerthDto)_dto ;
        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            int pos = 1;
            //BERTHCODE
            ps.setString(pos, dto.getBerthcode());
            pos++;

            //PROVINCECODE
            ps.setString(pos, dto.getProvincecode());
            pos++;

            //CITYCODE
            ps.setString(pos, dto.getCitycode());
            pos++;

            //ZONECODE
            ps.setString(pos, dto.getZonecode());
            pos++;

            //AREANAME
            ps.setString(pos, dto.getAreaname());
            pos++;

            //BUSINESSAREANAME
            ps.setString(pos, dto.getBusinessareaname());
            pos++;

            //PARKNAME
            ps.setString(pos, dto.getParkname());
            pos++;

            //INUSEFLAG
            ps.setString(pos, dto.getInuseflag());
            pos++;

            //BERTHTYPE
            ps.setString(pos, dto.getBerthtype());
            pos++;

            //ENTERPRISEINFO
            ps.setString(pos, dto.getEnterpriseinfo());
            pos++;

            //LNGINFO
            ps.setString(pos, dto.getLnginfo());
            pos++;

            //LATINFO
            ps.setString(pos, dto.getLatinfo());
            pos++;

            //ACTIVEDATE
            ps.setDate(pos, dto.getActivedate());
            pos++;

            //CLOSEDATE
            ps.setDate(pos, dto.getClosedate());
            pos++;

            //STATUS
            ps.setString(pos, dto.getStatus());
            pos++;

            //CREATETIME
            //UPDATETIME

           //ID
           ps.setString(pos, dto.getId());
           pos++;
           ps.executeUpdate();
        }
        finally
        {
           close(ps);
        }

        return ;
    }
    
    
    
      /**
     * Update batch record in Database.
     */

    public void update(IDto[] _dtos, Connection conn, boolean isLobSupport) throws SQLException
    {
     
     	 UsionBerthDto dto  ;
         for (int i= 0; i< _dtos.length ; i++)
         {
            dto  = (UsionBerthDto)_dtos[i] ; 
            String msgValid = dto.checkValid() ;
            if (msgValid != null)
                throw new SQLException("修改错误，"+msgValid) ;
         }

        PreparedStatement ps = null;
        try {
            if(isLobSupport){
                ps = conn.prepareStatement(SQL_UPDATE_LOB);
            }
            else{
                ps = conn.prepareStatement(SQL_UPDATE);
            }
            
            for (int i= 0; i< _dtos.length ; i++)
            {
                dto  = (UsionBerthDto)_dtos[i] ; 
                int pos = 1;
                //BERTHCODE
                 ps.setString(pos, dto.getBerthcode());
                pos++;

                //PROVINCECODE
                 ps.setString(pos, dto.getProvincecode());
                pos++;

                //CITYCODE
                 ps.setString(pos, dto.getCitycode());
                pos++;

                //ZONECODE
                 ps.setString(pos, dto.getZonecode());
                pos++;

                //AREANAME
                 ps.setString(pos, dto.getAreaname());
                pos++;

                //BUSINESSAREANAME
                 ps.setString(pos, dto.getBusinessareaname());
                pos++;

                //PARKNAME
                 ps.setString(pos, dto.getParkname());
                pos++;

                //INUSEFLAG
                 ps.setString(pos, dto.getInuseflag());
                pos++;

                //BERTHTYPE
                 ps.setString(pos, dto.getBerthtype());
                pos++;

                //ENTERPRISEINFO
                 ps.setString(pos, dto.getEnterpriseinfo());
                pos++;

                //LNGINFO
                 ps.setString(pos, dto.getLnginfo());
                pos++;

                //LATINFO
                 ps.setString(pos, dto.getLatinfo());
                pos++;

                //ACTIVEDATE
                 ps.setDate(pos, dto.getActivedate());
                pos++;

                //CLOSEDATE
                 ps.setDate(pos, dto.getClosedate());
                pos++;

                //STATUS
                 ps.setString(pos, dto.getStatus());
                pos++;

                //CREATETIME
                 //UPDATETIME
 
               //ID
               ps.setString(pos, dto.getId());
               pos++;
		       ps.addBatch(); 
	       }
	
           ps.executeBatch();
        }
        finally
        {
           close(ps);
        }

        return ;
    }



    /**
     * delete a record in Database.
     */
    public void delete(IPK _pk, Connection conn) throws SQLException
    {
       
      
       String msgValid = _pk.checkValid() ;
       if (msgValid != null)
       {
       		return ;
        //	throw new SQLException("删除错误，"+msgValid) ;
       }

       PreparedStatement ps = null;
       try {
           ps = conn.prepareStatement(SQL_DELETE);
		   UsionBerthPK pk = (UsionBerthPK)_pk ;
           ps.setString(1, pk.getId());
           ps.executeUpdate();
        }
        finally
        {
            close(ps);
        }
    }


     /**
     * delete batch record in Database.
     */
    public void delete(IPK[] _pks, Connection conn) throws SQLException
    {
        UsionBerthPK pk ;
        List pks = new ArrayList();  
	  
		for (int i= 0; i< _pks.length ; i++)
 		{
 			pk  = (UsionBerthPK)_pks[i] ; 
	    	String msgValid = pk.checkValid() ;
    		if (msgValid == null)
    		{
	    		pks.add(pk) ;
     		}
 		}
 		
 		
        PreparedStatement ps = null;
        try
         {
            ps = conn.prepareStatement(SQL_DELETE);
             
       		for (int i= 0; i< pks.size() ; i++)
       		{
       			pk  = (UsionBerthPK)(pks.get(i)) ; 
                ps.setString(1, pk.getId());
		        ps.addBatch() ;
			}
            ps.executeBatch();
        }
        finally
        {
            close(ps);
        }      
    }



    /**
    * Check IChangerNumber or UpdateTimeStamp.
    */
    public void check(IDto _dto, Connection conn) throws SQLException
    {
                                                      
		UsionBerthDto dtoNew = (UsionBerthDto)_dto ;
		UsionBerthDto dtoOld =(UsionBerthDto) findForUpdate(_dto.getPK(), conn,false) ;
		if (dtoOld != null) {
			if (! dtoOld.getUpdatetime().equals(dtoNew.getUpdatetime()))
				throw new SQLException("数据库表：usion_berth记录已经被修改!数据库中记录修改次数为:"+dtoOld.getUpdatetime()+"; 当前记录修改次数为:"+dtoNew.getUpdatetime()) ;
		}else{
			throw new SQLException("数据库表：usion_berth记录已经被删除!");
		}
    }


	/**
	* synchronize values between parent and children
	*/
    public void syncToChildren(IDto _dto)     throws SQLException{
       throw new SQLException("本记录没有与其它记录相关联，无法进行主记录与明细记录之间的数据同步。");
  }

	/**
	*get children
	*/
    public IDto[] findChildren (IDto _dto, Connection conn, boolean isLobSupport)     throws SQLException{
         throw new SQLException("此dto没有相关联的子dto，不能进行此操作");
  }    
    
  /**
   *return the children IDto class
   * @return Class
   */
  public Class getChildrenClass(){
	  return null;
  };    



    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    private void close(Statement stmt)
    {
        if (stmt != null)
        {
            try
            {
                stmt.close();
            }
            catch(SQLException    e)
            {
            	//
            }
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    private void close(ResultSet rs)
    {
        if (rs != null)
        {
            try
            {
                rs.close();
            }catch(SQLException  e)
            {
            	//
            }
        }
    }
  
}
